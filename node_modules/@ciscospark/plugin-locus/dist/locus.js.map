{"version":3,"sources":["../src/locus.js"],"names":["USE_INCOMING","USE_CURRENT","EQUAL","FETCH","Locus","extend","namespace","alert","locus","request","method","uri","url","body","deviceUrl","spark","device","then","res","create","invitee","options","service","resource","localMedias","localSdp","type","sdp","list","loci","get","join","leave","self","catch","reason","Conflict","reject","decline","updateMedia","mediaId","compare","current","incoming","Error","getEntriesFirstValue","sequence","entries","length","getEntriesLastValue","getCompareFirstValue","rangeStart","getCompareLastValue","rangeEnd","inRange","entry","currentOnlyEntries","incomingOnlyEntries","currentOnly","incomingOnly","i","push","getCallHistory","from","Date","now","toISOString","qs"],"mappings":"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","file":"locus.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, SparkHttpError} from '@ciscospark/spark-core';\nimport {difference, first, last, memoize} from 'lodash';\n\nexport const USE_INCOMING = `USE_INCOMING`;\nexport const USE_CURRENT = `USE_CURRENT`;\nexport const EQUAL = `EQUAL`;\nexport const FETCH = `FETCH`;\n\nconst Locus = SparkPlugin.extend({\n  namespace: `Locus`,\n\n  /**\n   * Alert the specified locus that the local user has been notified of the\n   * locus's active state\n   * @param {Types~Locus} locus\n   * @returns {Promise}\n   */\n  alert(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.url}/participant/alert`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Calls the specified invitee and offers the specified media via\n   * options.localSdp\n   * @param {string} invitee\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Promise<Types~Locus>}\n   */\n  create(invitee, options) {\n    options = options || {};\n\n    return this.request({\n      method: `POST`,\n      service: `locus`,\n      resource: `loci/call`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        invitee: {\n          invitee\n        },\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }]\n      }\n    })\n      // res.body.mediaConnections is deprecated so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Lists active loci\n   * @returns {Promise<Array<Types~Locus>>}\n   */\n  list() {\n    return this.request({\n      method: `GET`,\n      service: `locus`,\n      resource: `loci`\n    })\n      .then((res) => res.body.loci);\n  },\n\n  /**\n   * Retrieves a single Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~Locus}\n   */\n  get(locus) {\n    return this.request({\n      method: `GET`,\n      uri: `${locus.url}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Join the specified Locus and offer to send it media\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Types~Locus}\n   */\n  join(locus, options) {\n    options = options || {};\n\n    // TODO should options.localSdp be an array?\n    return this.request({\n      method: `POST`,\n      uri: `${locus.url}/participant`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }]\n      }\n    })\n      // The mediaConnections object is deprecated, so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n\n  /**\n   * Leave the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  leave(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/leave`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body.locus)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Decline to join the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  decline(locus) {\n    return this.request({\n      method: `PUT`,\n      // TODO can this be locus.self.url? or does self only work once we've\n      // joined?\n      uri: `${locus.url}/participant/decline`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Send a new sdp to Linus via the Locus API to update media state (e.g. to\n   * start or stop sending audio or video)\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @param {Object} options.mediaId\n   * @returns {Promise<Types~Locus>}\n   */\n  updateMedia(locus, options) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/media`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        localMedias: [{\n          type: `SDP`,\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          }),\n          mediaId: options.mediaId\n        }]\n      }\n    })\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, EQUAL, or FETCH\n   */\n  compare(current, incoming) {\n    if (!current) {\n      throw new Error(`\\`current\\` is required`);\n    }\n\n    if (!incoming) {\n      throw new Error(`\\`incoming\\` is required`);\n    }\n    // complexity here is unavoidable\n    /* eslint complexity: [0] */\n    /* eslint max-statements: [0] */\n\n    // must pick one of arrow-body-style or no-confusing-arrow to disable\n    /* eslint arrow-body-style: [0] */\n\n    // after running the #compare() test suite in a loop, there doesn't seem to\n    // be any appreciable difference when used with or without memoize; since\n    // real locus sequences are likely to contain more sequence numbers than\n    // those in the test suite, I have to assume memoize can only help and the\n    // overhead of memoizing these methods is not a problem.\n\n    const getEntriesFirstValue = memoize((locus) => {\n      return locus.sequence.entries.length === 0 ? 0 : first(locus.sequence.entries);\n    });\n    const getEntriesLastValue = memoize((locus) => {\n      return locus.sequence.entries.length === 0 ? 0 : last(locus.sequence.entries);\n    });\n    const getCompareFirstValue = memoize((locus) => {\n      return locus.sequence.rangeStart || getEntriesFirstValue(locus);\n    });\n    const getCompareLastValue = memoize((locus) => {\n      return getEntriesLastValue(locus) || locus.sequence.rangeEnd;\n    });\n    /**\n     * @param {number} entry\n     * @param {Types~Locus} locus\n     * @private\n     * @returns {Boolean}\n     */\n    function inRange(entry, locus) {\n      return entry >= locus.sequence.rangeStart && entry <= locus.sequence.rangeEnd;\n    }\n\n    if (getCompareLastValue(current) < getCompareFirstValue(incoming)) {\n      return USE_INCOMING;\n    }\n\n    if (getCompareFirstValue(current) > getCompareLastValue(incoming)) {\n      return USE_CURRENT;\n    }\n\n    const currentOnlyEntries = difference(current.sequence.entries, incoming.sequence.entries);\n    const incomingOnlyEntries = difference(incoming.sequence.entries, current.sequence.entries);\n    const currentOnly = [];\n    const incomingOnly = [];\n\n    for (const i of currentOnlyEntries) {\n      if (!inRange(i, incoming)) {\n        currentOnly.push(i);\n      }\n    }\n    for (const i of incomingOnlyEntries) {\n      if (!inRange(i, current)) {\n        incomingOnly.push(i);\n      }\n    }\n\n    if (!currentOnly.length && !incomingOnly.length) {\n      if (current.sequence.rangeEnd > incoming.sequence.rangeEnd) {\n        return USE_CURRENT;\n      }\n      if (current.sequence.rangeEnd < incoming.sequence.rangeEnd) {\n        return USE_INCOMING;\n      }\n      if (current.sequence.rangeStart < incoming.sequence.rangeStart) {\n        return USE_CURRENT;\n      }\n      if (current.sequence.rangeStart > incoming.sequence.rangeStart) {\n        return USE_INCOMING;\n      }\n      return EQUAL;\n    }\n\n    if (currentOnly.length && !incomingOnly.length) {\n      return USE_CURRENT;\n    }\n\n    if (!currentOnly.length && incomingOnly.length) {\n      return USE_INCOMING;\n    }\n\n    for (const i of currentOnly) {\n      if (getCompareFirstValue(incoming) < i && i < getCompareLastValue(incoming)) {\n        return FETCH;\n      }\n    }\n\n    for (const i of incomingOnly) {\n      if (getCompareFirstValue(current) < i && i < getCompareLastValue(current)) {\n        return FETCH;\n      }\n    }\n\n    if (currentOnly[0] > incomingOnly[0]) {\n      return USE_CURRENT;\n    }\n\n    return USE_INCOMING;\n  },\n\n  getCallHistory(options) {\n    options = options || {};\n    const from = (new Date(options.from || Date.now())).toISOString();\n\n    return this.request({\n      method: `GET`,\n      service: `janus`,\n      resource: `history/userSessions`,\n      qs: {from}\n    })\n      .then((res) => res.body);\n  }\n\n});\n\nexport default Locus;\n"]}