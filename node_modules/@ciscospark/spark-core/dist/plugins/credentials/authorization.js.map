{"version":3,"sources":["../../../src/plugins/credentials/authorization.js"],"names":["AuthorizationBase","extend","derived","canRefresh","deps","fn","Boolean","refresh_token","isAuthenticated","access_token","isExpired","cache","expires","Date","now","isValid","namespace","props","expires_in","refresh_token_expires","refresh_token_expires_in","token_type","default","type","session","isRefreshing","toString","initialize","args","prototype","refresh","reject","Error","vars","key","config","baseVar","logger","info","request","method","uri","oauth","tokenUrl","form","grant_type","redirect_uri","auth","user","client_id","pass","client_secret","sendImmediately","shouldRefreshAccessToken","then","res","body","constructor","catch","reason","statusCode","ErrorConstructor","select","error","_res","revoke","resolve","revokeUrl","token","token_type_hint","unset","getAttributes"],"mappings":"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","file":"authorization.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint camelcase: [0] */\n\nimport grantErrors from './grant-errors';\nimport {has, pick} from 'lodash';\nimport {oneFlight} from '@ciscospark/common';\nimport SparkPlugin from '../../lib/spark-plugin';\n\nconst AuthorizationBase = SparkPlugin.extend({\n  derived: {\n    canRefresh: {\n      deps: [`refresh_token`],\n      fn() {\n        return Boolean(this.refresh_token);\n      }\n    },\n\n    isAuthenticated: {\n      deps: [\n        `access_token`,\n        `refresh_token`\n      ],\n      fn() {\n        return Boolean(this.access_token || this.refresh_token);\n      }\n    },\n\n    isExpired: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `expires`\n      ],\n      fn() {\n        // if we don't have an access token, it can't actually be expired\n        return !this.access_token || Boolean(this.access_token && this.expires && Date.now() > this.expires);\n      }\n    },\n\n    isValid: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `isExpired`,\n        `canRefresh`\n      ],\n      fn() {\n        return this.access_token && !this.isExpired || this.canRefresh;\n      }\n    }\n  },\n\n  namespace: `Credentials`,\n\n  props: {\n    access_token: `string`,\n    expires: `number`,\n    expires_in: `number`,\n    refresh_token: `string`,\n    refresh_token_expires: `number`,\n    refresh_token_expires_in: `number`,\n    token_type: {\n      default: `Bearer`,\n      type: `string`\n    }\n  },\n\n  session: {\n    isRefreshing: {\n      default: false,\n      type: `boolean`\n    }\n  },\n\n  toString() {\n    if (this.token_type && this.access_token) {\n      return `${this.token_type} ${this.access_token}`;\n    }\n    return ``;\n  },\n\n  initialize(...args) {\n    const now = Date.now();\n\n    if (!this.expires && this.expires_in) {\n      this.expires = now + this.expires_in * 1000;\n    }\n\n    if (!this.refresh_token_expires && this.refresh_token_expires_in) {\n      this.refresh_token_expires = now + this.refresh_token_expires_in * 1000;\n    }\n\n    return Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n  },\n\n  @oneFlight\n  refresh() {\n    /* eslint no-invalid-this: [0] */\n    if (!this.canRefresh) {\n      return Promise.reject(new Error(`Authorization cannot be refreshed`));\n    }\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.isRefreshing = true;\n\n    this.logger.info(`authorization: refreshing access token`);\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `refresh_token`,\n        redirect_uri: this.config.oauth.redirect_uri,\n        refresh_token: this.refresh_token\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        // If the authentication server did not send back a refresh_token, copy\n        // the current refresh token and related values onto the response.\n        if (!res.body.refresh_token) {\n          Object.assign(res.body, pick(this, `refresh_token`, `refresh_token_expires`, `refresh_token_expires_in`));\n        }\n\n        this.logger.info(`authorization: access token refreshed`);\n\n        // this.constructor *should* be Authorization. We can`t use it by name\n        // because this file defines AuthorizationBase.\n        return new this.constructor(res.body);\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      })\n      .then((res) => {\n        this.isRefreshing = false;\n        return res;\n      })\n      .catch((res) => {\n        this.isRefreshing = false;\n        return Promise.reject(res);\n      });\n  },\n\n  @oneFlight\n  revoke() {\n    /* eslint no-invalid-this: [0] */\n    if (this.isExpired || !this.isValid) {\n      this.logger.info(`authorization: access token already expired or invalid, not revoking`);\n\n      return Promise.resolve();\n    }\n\n    this.logger.info(`authorization: revoking access token`);\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.revokeUrl,\n      form: {\n        token: this.access_token,\n        token_type_hint: `access_token`\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        this.logger.info(`authorization: authorization revoked`);\n        this.unset(Object.keys(this.getAttributes({props: true})));\n        return res;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      });\n  }\n});\n\nexport default AuthorizationBase;\n"]}