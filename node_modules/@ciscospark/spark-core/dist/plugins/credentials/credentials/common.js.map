{"version":3,"sources":["../../../../src/plugins/credentials/credentials/common.js"],"names":["resolveWithResponseBody","res","body","processGrant","derived","canRefresh","deps","fn","config","requestJWT","Boolean","oauth","client_id","client_secret","authorization","isAuthenticated","isAuthenticating","_isAuthenticating","isRefreshing","isExpired","namespace","props","type","clientAuthorization","name","setOnce","orgId","session","default","password","previousAuthorization","authenticate","authorize","options","code","logger","info","requestAuthorizationCodeGrant","then","jwt","requestAccessTokenFromJwt","refresh","set","requestSamlExtensionGrant","catch","reject","Error","getAuthorization","toString","resolve","getClientCredentialsAuthorization","promise","requestClientCredentialsGrant","logout","all","map","key","revoke","unset","boundedStorage","del","reason","error","force","_pushAuthorization","bind","_handleRefreshFailure","spark","request","method","uri","hydraServiceUrl","headers","access_token","token","token_type","expires_in","expiresIn","vars","baseVar","scope","tokenUrl","form","grant_type","redirect_uri","auth","user","pass","sendImmediately","shouldRefreshAccessToken","statusCode","ErrorConstructor","select","_res","_pushClientCredentialsAuthorization","_getSamlBearerToken","_getOauthBearerToken","value","attrs","forEach","propName","parent","prototype","arguments","buildLogoutUrl","logoutUri","stringify","goto","service","buildOAuthUrl","fields","parameters","state","response_type","toBase64Url","authorizationUrl","samlData","assertion","BearerToken","samlUrl","warn","errorDescription"],"mappings":"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","file":"common.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Authorization from '../authorization';\nimport {base64, oneFlight, retry} from '@ciscospark/common';\nimport {clone, has, get, isObject, pick} from 'lodash';\nimport grantErrors from '../grant-errors';\nimport querystring from 'querystring';\nimport SparkPlugin from '../../../lib/spark-plugin';\nimport {waitForValue} from '../../../lib/storage';\n\n/**\n * Helper. Returns just the response body\n * @param {http.IncomingMessage} res\n * @returns {Object}\n */\nfunction resolveWithResponseBody(res) {\n  return res.body;\n}\n\n/**\n * Helper. Converts a response body into an Authorization object\n * @param {http.IncomingMessage} res\n * @returns {Authorization}\n */\nfunction processGrant(res) {\n  return new Authorization(res.body);\n}\n\nexport default {\n  derived: {\n    canRefresh: {\n      deps: [`authorization.canRefresh`],\n      fn() {\n        if (this.config.requestJWT) {\n          return true;\n        }\n        /* eslint camelcase: [0] */\n        return Boolean(this.config.oauth.client_id && this.config.oauth.client_secret && this.authorization && this.authorization.canRefresh);\n      }\n    },\n    isAuthenticated: {\n      deps: [`authorization.isAuthenticated`],\n      fn() {\n        return Boolean(this.authorization && this.authorization.isAuthenticated);\n      }\n    },\n    isAuthenticating: {\n      deps: [\n        `authorization.isRefreshing`,\n        `_isAuthenticating`\n      ],\n      fn() {\n        return this._isAuthenticating || this.authorization && this.authorization.isRefreshing;\n      }\n    },\n    isExpired: {\n      deps: [`authorization.isExpired`],\n      fn() {\n        return Boolean(this.authorization && this.authorization.isExpired);\n      }\n    }\n  },\n\n  namespace: `Credentials`,\n\n  props: {\n    authorization: {\n      type: `state`\n    },\n    clientAuthorization: {\n      type: `state`\n    },\n    name: {\n      setOnce: true,\n      type: `string`\n    },\n    orgId: {\n      setOnce: true,\n      type: `string`\n    }\n  },\n\n  session: {\n    _isAuthenticating: {\n      default: false,\n      type: `boolean`\n    },\n    password: `string`,\n    previousAuthorization: {\n      type: `state`\n    }\n  },\n\n  authenticate(...args) {\n    return this.authorize(...args);\n  },\n\n  authorize(options) {\n    /* eslint no-invalid-this: [0] */\n    this._isAuthenticating = true;\n    options = options || {};\n    if (options.code) {\n      this.logger.info(`credentials: auth code received, exchanging for access_token`);\n      return this.requestAuthorizationCodeGrant(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        });\n    }\n\n    if (options.jwt) {\n      return this.requestAccessTokenFromJwt(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        });\n    }\n\n    if (this.canRefresh) {\n      this.logger.info(`credentials: refreshable, refreshing`);\n      return this.refresh(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        });\n    }\n\n    this.set(pick(options, `name`, `orgId`, `password`));\n\n    if (this.name && this.orgId && this.password) {\n      this.logger.info(`credentials: machine credentials received, authenticating`);\n      return this.requestSamlExtensionGrant(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        })\n        .catch((res) => {\n          this._isAuthenticating = false;\n          return Promise.reject(res);\n        });\n    }\n\n\n    this._isAuthenticating = false;\n    return Promise.reject(new Error(`not enough parameters to authenticate`));\n  },\n\n  @oneFlight\n  @waitForValue(`authorization`)\n  getAuthorization() {\n    if (this.isAuthenticated) {\n      if (this.isExpired) {\n        if (this.canRefresh) {\n          return this.refresh()\n            .then(() => this.authorization.toString());\n        }\n\n        return Promise.reject(new Error(`Access token has expired or cannot be refreshed`));\n      }\n\n      return Promise.resolve(this.authorization.toString());\n    }\n\n    return Promise.reject(new Error(`not authenticated`));\n  },\n\n  @oneFlight\n  @waitForValue(`clientAuthorization`)\n  getClientCredentialsAuthorization() {\n    let promise;\n    if (!this.clientAuthorization || !this.clientAuthorization.isAuthenticated || this.clientAuthorization.isExpired) {\n      promise = this.requestClientCredentialsGrant();\n    }\n    else {\n      promise = Promise.resolve();\n    }\n\n    return promise\n      .then(() => this.clientAuthorization.toString());\n  },\n\n  /**\n   * @returns {Promise}\n   */\n  logout() {\n    return Promise.all([\n      `authorization`,\n      `previousAuthorization`\n    ].map((key) => {\n      if (this[key]) {\n        return this[key].revoke()\n          .then(() => this.unset(key))\n          .then(() => this.boundedStorage.del(key))\n          .catch((reason) => {\n            this.logger.error(`credentials: ${key} revocation falied`, reason);\n          });\n      }\n      return Promise.resolve();\n    }));\n  },\n\n  /**\n   * Refreshes credentials with a refresh token\n   * @param {Object} options\n   * @param {Object} options.force If true, refresh the token even if the token\n   * appears unexpired\n   * @returns {Promise} Resolves when credentials have been refreshed\n   */\n  @oneFlight\n  refresh(options) {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info(`credentials: refresh requested`);\n\n    options = options || {};\n\n    if (!options.force && !get(this, `authorization.isExpired`)) {\n      this.logger.info(`credentials: authorization not expired, not refreshing`);\n      return Promise.resolve();\n    }\n\n    this.logger.info(`credentials: refreshing`);\n\n    if (this.config.requestJWT) {\n      this.logger.info(`credentials: request new jwt`);\n      return this.config.requestJWT()\n        .then((jwt) => this.requestAccessTokenFromJwt(jwt));\n    }\n\n    return this.authorization.refresh(options)\n      .then(this._pushAuthorization.bind(this))\n      .catch(this._handleRefreshFailure.bind(this));\n  },\n\n  @oneFlight\n  requestAccessTokenFromJwt(options) {\n    this.logger.info(`credentials: exchanging jwt for access token`);\n    return this.spark.request({\n      method: `POST`,\n      // I'm not thrilled by directly referencing the hydra service url, but\n      // since the spark-core credentials plugin is on the march toward\n      // deprecation, I think it's tolerable for now.\n      uri: `${this.config.hydraServiceUrl}/jwt/login`,\n      headers: {\n        authorization: options.jwt\n      }\n    })\n      .then((res) => ({\n        body: {\n          access_token: res.body.token,\n          token_type: `Bearer`,\n          expires_in: res.body.expiresIn\n        }\n      }))\n      .then(processGrant)\n      .then(this._pushAuthorization.bind(this));\n  },\n\n  @oneFlight\n  requestAuthorizationCodeGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    /* eslint camelcase: [0] */\n    this.logger.info(`credentials: requesting authorization code grant`);\n\n    options = options || {};\n    options.scope = options.scope || this.config.oauth.scope;\n\n    if (!options.code) {\n      return Promise.reject(new Error(`\\`options.code\\` is required`));\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `authorization_code`,\n        redirect_uri: this.config.oauth.redirect_uri,\n        code: options.code\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then(processGrant)\n      .then(this._pushAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  },\n\n  @oneFlight\n  requestClientCredentialsGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.logger.info(`credentials: requesting client credentials grant`);\n\n    options = options || {};\n    // Right now, admin is the only service that needs Client Credentials,\n    // so we`ll hard code that here. long term, we`ll want to keep track of\n    // scope used to request a specific token and (potentially) specify\n    // scope as an options passed to Clinet#request so it can pick the right\n    // token.\n    options.scope = options.scope || `webexsquare:admin`;\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `client_credentials`,\n        scope: options.scope,\n        shouldRefreshAccessToken: false\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      }\n    })\n      .then(processGrant)\n      .then(this._pushClientCredentialsAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  },\n\n  @oneFlight\n  @retry\n  requestSamlExtensionGrant(options) {\n    options = options || {};\n    options.scope = options.scope || this.config.oauth.scope;\n\n    this.logger.info(`credentials: requesting SAML extension grant`);\n\n    return this._getSamlBearerToken(options)\n      .then(this._getOauthBearerToken.bind(this, options))\n      .then(processGrant)\n      .then(this._pushAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  },\n\n  set(key, value) {\n    let attrs;\n    if (isObject(key)) {\n      attrs = key;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    [\n      `authorization`,\n      `clientAuthorization`,\n      `previousAuthorization`\n    ].forEach((propName) => {\n      if (attrs[propName]) {\n        if (!(attrs[propName] instanceof Authorization)) {\n          attrs[propName] = new Authorization(attrs[propName]);\n        }\n        attrs[propName].parent = this;\n      }\n    });\n\n    /* eslint prefer-rest-params: [0] */\n    return Reflect.apply(SparkPlugin.prototype.set, this, arguments);\n  },\n\n  buildLogoutUrl() {\n    // eslint doesn't yet handle nested strings quite right\n    /* eslint quotes: [0] */\n    return `${this.config.logoutUri}?${querystring.stringify({\n      type: 'logout',\n      goto: this.config.oauth.redirect_uri,\n      service: this.config.oauth.service\n    })}`;\n  },\n\n  buildOAuthUrl(options) {\n    /* eslint camelcase: [0] */\n    const fields = [\n      `client_id`,\n      `redirect_uri`,\n      `scope`,\n      `service`\n    ];\n\n    const parameters = clone(options);\n\n    parameters.state = parameters.state || {};\n    if (!isObject(parameters.state)) {\n      throw new Error('if specified, `options.state` must be an object');\n    }\n\n    if (!parameters.response_type) {\n      throw new Error('`options.response_type` is required');\n    }\n\n    fields.forEach((key) => {\n      if (key in this.config.oauth) {\n        parameters[key] = this.config.oauth[key];\n      }\n      else {\n        throw new Error(`\\`${key}\\` is required`);\n      }\n    }, this);\n\n    // Some browser aparently don't parse nested querystrings very well, so\n    // we'll additionally base64url-encode the state\n    parameters.state = base64.toBase64Url(querystring.stringify(parameters.state));\n    return `${this.config.oauth.authorizationUrl}?${querystring.stringify(parameters)}`;\n  },\n\n  /**\n   * Converts a CI SAML Bearer Token to an OAuth Bearer Token.\n   * @param {Object} options\n   * @param {Object} options.scope\n   * @param {Object} samlData Response body from the CI SAML endpoint.\n   * @private\n   * @return {Promise} Resolves with the bot's credentials.\n   */\n   @oneFlight\n  _getOauthBearerToken(options, samlData) {\n    this.logger.info(`credentials: exchanging SAML Bearer Token for OAuth Bearer Token`);\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        /* eslint camelcase: [0] */\n        grant_type: `urn:ietf:params:oauth:grant-type:saml2-bearer`,\n        assertion: samlData.BearerToken,\n        scope: options.scope\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    });\n  },\n\n  /**\n   * Retrieves a CI SAML Bearer Token\n   * @private\n   * @return {Promise} Resolves with an Object containing a `BearerToken` and an\n   * `AccountExpires`\n   */\n   @oneFlight\n  _getSamlBearerToken() {\n    this.logger.info(`credentials: requesting SAML Bearer Token`);\n\n    if (!this.orgId) {\n      return Promise.reject(new Error(`\\`this.orgId\\` is required`));\n    }\n\n    if (!this.name) {\n      return Promise.reject(new Error(`\\`this.name\\` is required`));\n    }\n\n    if (!this.password) {\n      return Promise.reject(new Error(`\\`this.password\\` is required`));\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.samlUrl}/${this.orgId}/v2/actions/GetBearerToken/invoke`,\n      body: pick(this, `name`, `password`),\n      shouldRefreshAccessToken: false\n    })\n      .then(resolveWithResponseBody);\n  },\n\n  _handleRefreshFailure(res) {\n    if (res.error && res.error === 'invalid_request') {\n      this.logger.warn('token refresh failed: ', res.errorDescription);\n      this.unset('authorization');\n    }\n\n    return Promise.reject(res);\n  },\n\n  _pushClientCredentialsAuthorization(authorization) {\n    this.logger.info('credentials: received client credentials');\n\n    this.clientAuthorization = authorization;\n  },\n\n  _pushAuthorization(authorization) {\n    this.logger.info('credentials: received authorization');\n\n    const previousAuthorization = this.previousAuthorization;\n    this.previousAuthorization = this.authorization;\n    this.authorization = authorization;\n\n    if (previousAuthorization) {\n      previousAuthorization.revoke();\n    }\n  }\n};\n"]}