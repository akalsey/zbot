'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');

var _deleteProperty2 = _interopRequireDefault(_deleteProperty);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _has = require('lodash/has');

var _has2 = _interopRequireDefault(_has);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign3 = require('babel-runtime/core-js/object/assign');

var _assign4 = _interopRequireDefault(_assign3);

var _dec, _dec2, _dec3, _desc, _value, _obj; /**!
                                              *
                                              * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
                                              * @private
                                              */

/* eslint-env browser */

var _common = require('@ciscospark/common');

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _authorization = require('../authorization');

var _authorization2 = _interopRequireDefault(_authorization);

var _common2 = require('./common');

var _common3 = _interopRequireDefault(_common2);

var _storage = require('../../../lib/storage');

var _sparkPlugin = require('../../../lib/spark-plugin');

var _sparkPlugin2 = _interopRequireDefault(_sparkPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * @private
 * @returns {undefined}
 */
function noop() {/* eslint no-empty:[0] */}

var Credentials = _sparkPlugin2.default.extend((0, _assign4.default)({}, _common3.default, (_dec = (0, _storage.waitForValue)('authorization'), _dec2 = (0, _storage.persist)('authorization'), _dec3 = (0, _storage.persist)('clientAuthorization'), (_obj = {
  authorize: function authorize(options) {
    /* eslint complexity: [0] */
    /* eslint camelcase: [0] */
    /* eslint no-invalid-this: [0] */

    this.logger.info('credentials(shim): authenticating');

    options = options || {};
    if (this.isAuthenticated && !options.force) {
      this.logger.info('credentials(shim): authentication not expired, not authenticating');
      return _promise2.default.resolve();
    }

    this.set((0, _pick2.default)(options, 'name', 'orgId', 'password'));
    if (this.canRefresh || options.code || this.name && this.orgId && this.password) {
      /* eslint prefer-rest-params: [0] */
      return (0, _apply2.default)(_common3.default.authorize, this, arguments);
    }

    options.state = options.state || {};
    options.state.csrf_token = options.state.csrf_token || this._generateSecurityToken();

    this._isAuthenticating = true;
    switch (this.config.clientType) {
      case 'confidential':
        return this.initiateAuthorizationCodeGrant(options);
      case 'public':
        return this.initiateImplicitGrant(options);
      default:
        return _promise2.default.reject(new Error('config.credentials.clientType must be defined'));
    }
  },
  initiateImplicitGrant: function initiateImplicitGrant(options) {
    var vars = {
      'oauth.client_id': 'CLIENT_ID',
      'oauth.redirect_uri': 'REDIRECT_URI',
      'oauth.scope': 'SCOPE'
    };

    for (var key in vars) {
      if (!(0, _has2.default)(this.config, key)) {
        var baseVar = vars[key];
        return _promise2.default.reject(new Error('config.credentials.' + key + ' or CISCOSPARK_' + baseVar + ' or COMMON_IDENTITY_' + baseVar + ' or ' + baseVar + ' must be defined'));
      }
    }

    this.logger.info('credentials(shim): initiating implicit grant flow');

    /* eslint camelcase: [0] */
    window.location = this.buildOAuthUrl((0, _assign2.default)({ response_type: 'token' }, options));

    // Return an unreasolved promise to suppress console errors.
    return new _promise2.default(noop);
  },
  initiateAuthorizationCodeGrant: function initiateAuthorizationCodeGrant(options) {
    var vars = {
      'oauth.client_id': 'CLIENT_ID',
      'oauth.client_secret': 'CLIENT_SECRET',
      'oauth.redirect_uri': 'REDIRECT_URI',
      'oauth.scope': 'SCOPE'
    };

    for (var key in vars) {
      if (!(0, _has2.default)(this.config, key)) {
        var baseVar = vars[key];
        return _promise2.default.reject(new Error('config.credentials.' + key + ' or CISCOSPARK_' + baseVar + ' or COMMON_IDENTITY_' + baseVar + ' or ' + baseVar + ' must be defined'));
      }
    }

    this.logger.info('credentials(shim): initiating authorization code grant flow');

    window.location = this.buildOAuthUrl((0, _assign2.default)({ response_type: 'code' }, options));
    return new _promise2.default(noop);
  },
  initialize: function initialize() {
    var _this = this;

    // AmpersandState is a little weird about initialization order. Code that
    // depends on this.config needs to run after SparkCore#initialize executes,
    // so, we'll use process.nextTick to run the following block on the next
    // execution cycle.
    process.nextTick(function () {
      var location = _url2.default.parse(window.location.href, true);

      var query = (0, _clone2.default)(location.query);

      if (query.code) {
        (0, _deleteProperty2.default)(location.query, 'code');
        (0, _deleteProperty2.default)(location.query, 'state');

        _this._updateLocation(location);

        // Though initialize is a synchronous call, it should be safe to
        // call authenticate() because it'll get called again later but end
        // up cached via oneFlight.
        // Call spark.authenticate to make sure we trigger a device refresh.
        return _this.spark.authenticate(query);
      }

      if (query.access_token) {
        location.query = _this._extractTokenInfo(query);
        _this._updateLocation(location);
        return _promise2.default.resolve(noop);
      }

      var hash = location.hash || '';
      if (hash.includes('#')) {
        hash = hash.substr(1);
      }

      query = _querystring2.default.parse(hash);
      if (query.access_token) {
        location.hash = _this._extractTokenInfo(query);
        _this._updateLocation(location);
      }

      return _promise2.default.resolve();
    });
  },
  logout: function logout() {
    var _this2 = this;

    this.logger.info('credentials(shim): logging out');

    /* eslint prefer-rest-params: [0] */
    return (0, _apply2.default)(_common3.default.logout, this, arguments).then(function () {
      window.location = _this2.buildLogoutUrl();
    });
  },
  _extractTokenInfo: function _extractTokenInfo(query) {
    var tokenKeys = ['access_token', 'expires_in', 'token_type', 'refresh_token', 'refresh_token_expires_in'];

    query.state = _querystring2.default.parse(_common.base64.fromBase64url(query.state));

    this._verifySecurityToken(query.state.csrf_token);

    var token = (0, _pick2.default)(query, tokenKeys);
    token.expires_in = parseInt(token.expires_in, 10);
    token.refresh_token_expires_in = parseInt(token.refresh_token_expires_in, 10);
    var auth = new _authorization2.default(token);
    this._pushAuthorization(auth);

    query = (0, _omit2.default)(query, tokenKeys);
    query.state = (0, _omit2.default)(query.state, 'csrf_token');
    if ((0, _keys2.default)(query.state).length === 0) {
      (0, _deleteProperty2.default)(query, 'state');
    } else {
      query.state = _common.base64.toBase64Url(_querystring2.default.stringify(query.state));
    }

    return query;
  },
  _generateSecurityToken: function _generateSecurityToken() {
    this.logger.info('credentials(shim): generating csrf token');

    var token = _uuid2.default.v4();
    sessionStorage.setItem('oauth2-csrf-token', token);
    return token;
  },
  _verifySecurityToken: function _verifySecurityToken(token) {
    this.logger.info('credentials(shim): verifying csrf token');

    var _token = sessionStorage.getItem('oauth2-csrf-token');
    sessionStorage.removeItem('oauth2-csrf-token');

    if (token !== _token) {
      throw new Error('CSRF token ' + token + ' does not match stored token ' + _token);
    }
  },
  _updateLocation: function _updateLocation(location) {
    if (typeof location !== 'string') {
      if (location.query) {
        (0, _deleteProperty2.default)(location, 'search');
      }
      if (typeof location.hash !== 'string') {
        location.hash = _querystring2.default.stringify(location.hash);
      }
      location = _url2.default.format(location);
    }

    this.logger.info('credentials(shim): updating browser location', location);
    // It's pretty unlikely the SDK will be used in a browser that doesn't
    // support the history API, so we'll just ignore the cases where it's not
    // available.
    if (window.history && window.history.replaceState) {
      window.history.replaceState({}, null, location);
    }
  }
}, (_applyDecoratedDescriptor(_obj, 'authorize', [_common.oneFlight, _dec], (0, _getOwnPropertyDescriptor2.default)(_obj, 'authorize'), _obj), _applyDecoratedDescriptor(_obj, 'initialize', [_dec2, _dec3], (0, _getOwnPropertyDescriptor2.default)(_obj, 'initialize'), _obj)), _obj))));

exports.default = Credentials;
//# sourceMappingURL=browser.js.map
