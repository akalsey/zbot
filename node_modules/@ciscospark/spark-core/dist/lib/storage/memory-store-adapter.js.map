{"version":3,"sources":["../../../src/lib/storage/memory-store-adapter.js"],"names":["bind","namespace","options","reject","Error","logger","map","info","resolve","del","key","delete","get","res","put","value","set"],"mappings":";;;;;;;;;;;;;;AAMA;;;;kBAEe;AACbA,MADa,gBACRC,SADQ,EACGC,OADH,EACY;AACvBA,cAAUA,WAAW,EAArB;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,aAAO,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,2BAAf,CAAP;AACD;;AAED,QAAI,CAACF,QAAQG,MAAb,EAAqB;AACnB,aAAO,kBAAQF,MAAR,CAAe,IAAIC,KAAJ,gCAAf,CAAP;AACD;;AAED,QAAMC,SAASH,QAAQG,MAAvB;;AAEA,QAAMC,MAAM,mBAAZ;AACAD,WAAOE,IAAP;AACA,WAAO,kBAAQC,OAAR,CAAgB;AACrBC,SADqB,eACjBC,GADiB,EACZ;AACPL,eAAOE,IAAP,sCAAgDG,GAAhD;AACA,eAAO,kBAAQF,OAAR,CAAgBF,IAAIK,MAAJ,CAAWD,GAAX,CAAhB,CAAP;AACD,OAJoB;AAKrBE,SALqB,eAKjBF,GALiB,EAKZ;AACPL,eAAOE,IAAP,qCAA+CG,GAA/C;AACA,YAAMG,MAAMP,IAAIM,GAAJ,CAAQF,GAAR,CAAZ;AACA,YAAI,OAAOG,GAAP,gBAAJ,EAAgC;AAC9B,iBAAO,kBAAQV,MAAR,CAAe,2BAAf,CAAP;AACD;;AAED,eAAO,kBAAQK,OAAR,CAAgBK,GAAhB,CAAP;AACD,OAboB;AAcrBC,SAdqB,eAcjBJ,GAdiB,EAcZK,KAdY,EAcL;AACdV,eAAOE,IAAP,qCAA+CG,GAA/C;AACA,eAAO,kBAAQF,OAAR,CAAgBF,IAAIU,GAAJ,CAAQN,GAAR,EAAaK,KAAb,CAAhB,CAAP;AACD;AAjBoB,KAAhB,CAAP;AAmBD;AAlCY,C,EARf","file":"memory-store-adapter.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {NotFoundError} from './errors';\n\nexport default {\n  bind(namespace, options) {\n    options = options || {};\n    if (!namespace) {\n      return Promise.reject(new Error(`\\`namespace\\` is required`));\n    }\n\n    if (!options.logger) {\n      return Promise.reject(new Error(`\\`options.logger\\` is required`));\n    }\n\n    const logger = options.logger;\n\n    const map = new Map();\n    logger.info(`memory-store-adapter: returning binding`);\n    return Promise.resolve({\n      del(key) {\n        logger.info(`memory-store-adapter: deleting \\`${key}\\``);\n        return Promise.resolve(map.delete(key));\n      },\n      get(key) {\n        logger.info(`memory-store-adapter: reading \\`${key}\\``);\n        const res = map.get(key);\n        if (typeof res === `undefined`) {\n          return Promise.reject(new NotFoundError());\n        }\n\n        return Promise.resolve(res);\n      },\n      put(key, value) {\n        logger.info(`memory-store-adapter: writing \\`${key}\\``);\n        return Promise.resolve(map.set(key, value));\n      }\n    });\n  }\n};\n"]}