{"version":3,"sources":["../../../src/lib/storage/make-spark-store.js"],"names":["makeSparkStore","bindings","type","spark","SparkStore","keyFactory","namespace","logger","log","set","key","info","_getBinding","then","binding","del","get","value","put","serialize","resolve","adapter","bind","_binding","config","storage","prototype"],"mappings":"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","file":"make-spark-store.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Events from 'ampersand-events';\nimport {oneFlight} from '@ciscospark/common';\n\nconst bindings = new WeakMap();\n\n/**\n * Makes a SparkStore for the specified type bound to the specified spark instance\n * @param {string} type\n * @param {ProxySpark} spark\n * @returns {SparkStore}\n */\nexport default function makeSparkStore(type, spark) {\n\n  /**\n   * Lazy Key-Value Store Interface\n   */\n  class SparkStore {\n    /**\n     * @param {Object} attrs\n     * @param {Object} options\n     * @returns {Store}\n     */\n    constructor() {\n      spark.logger.log(`spark-store: constructing ${type}Storage`);\n      bindings.set(this, new Map());\n    }\n\n    /**\n     * Provides easy access to the storage adapter identified in config.\n     * @returns {Object}\n     */\n    get adapter() {\n      return spark.config.storage[`${type}Adapter`];\n    }\n\n    /**\n     * @returns {WeakMap}\n     */\n    get bindings() {\n      return bindings.get(this);\n    }\n\n    /**\n     * Deletes the specified key from the store\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {[type]}\n     */\n    del(namespace, key) {\n      spark.logger.info(`spark-store: removing ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.del(key));\n    }\n\n    /**\n     * Retrieves the value specified by key from the store. Rejects with\n     * NotFoundError if no value can be found\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {Promise}\n     */\n    get(namespace, key) {\n      spark.logger.info(`spark-store: retrieving ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.get(key));\n    }\n\n    /**\n     * Writes a value to the store. Deletes the specified key from the store\n     * if passed `undefined`\n     * @param {string} namespace\n     * @param {string} key\n     * @param {any} value\n     * @returns {Promise} Resolves with value (to simplify write-through caching)\n     */\n    put(namespace, key, value) {\n      if (typeof value === `undefined`) {\n        return this.del(namespace, key);\n      }\n      spark.logger.info(`spark-store: setting ${namespace}:${key}`);\n      return this._getBinding(namespace)\n        .then((binding) => binding.put(key, value.serialize ? value.serialize() : value))\n        .then(() => value);\n    }\n\n    /**\n     * Creates an interface bound to the specified namespace\n     * @param {string} namespace\n     * @returns {Promise}\n     */\n    @oneFlight({keyFactory: (namespace) => namespace})\n    // suppress doc warning because decorators confuse eslint\n    // eslint-disable-next-line require-jsdoc\n    _getBinding(namespace) {\n      return new Promise((resolve) => {\n        spark.logger.info(`storage: getting binding for \\`${namespace}\\``);\n        const binding = this.bindings.get(namespace);\n        if (binding) {\n          spark.logger.info(`storage: found binding for \\`${namespace}\\``);\n          return resolve(binding);\n        }\n\n        return resolve(this.adapter.bind(namespace, {logger: spark.logger})\n          .then((_binding) => {\n            spark.logger.info(`storage: made binding for \\`${namespace}\\``);\n            this.bindings.set(namespace, _binding);\n            return _binding;\n          }));\n      });\n    }\n  }\n\n  Object.assign(SparkStore.prototype, Events);\n\n  return new SparkStore();\n}\n"]}