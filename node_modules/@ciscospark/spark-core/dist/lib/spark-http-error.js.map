{"version":3,"sources":["../../src/lib/spark-http-error.js"],"names":["SparkHttpError","parseFn","res","rest","message","prototype","call","enumerable","value","options","url","method","uri","service","toUpperCase","resource","headers","trackingid","subTypeName","makeSubTypes"],"mappings":";;;;;;;;;;AAMA;;;;AACA;;;;AAPA;;;;;;AASA,IAAMA,iBAAiB,gDAAuB;AAC5CC,SAD4C,mBACpCC,GADoC,EACtB;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACpB;AACA,QAAIC,UAAU,6CAAUC,SAAV,CAAoBJ,OAApB,EAA4BK,IAA5B,+BAAiC,IAAjC,EAAuCJ,GAAvC,SAA+CC,IAA/C,EAAd;;AAEA,kCAAuB,IAAvB,aAAwC;AACtCI,kBAAY,KAD0B;AAEtCC,aAAON,IAAIO;AAF2B,KAAxC;;AAKA,QAAI,KAAKA,OAAL,CAAaC,GAAjB,EAAsB;AACpBN,wBAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaC,GAApD;AACD,KAFD,MAGK,IAAI,KAAKD,OAAL,CAAaG,GAAjB,EAAsB;AACzBR,wBAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaG,GAApD;AACD,KAFI,MAGA;AACHR,wBAAgB,KAAKK,OAAL,CAAaE,MAA7B,SAAuC,KAAKF,OAAL,CAAaI,OAAb,CAAqBC,WAArB,EAAvC,SAA6E,KAAKL,OAAL,CAAaM,QAA1F;AACD;AACDX,yCAAmC,KAAKK,OAAL,CAAaO,OAAb,CAAqBC,UAAxD;AACA,QAAI,KAAKR,OAAL,CAAaO,OAAb,IAAwB,KAAKP,OAAL,CAAaO,OAAb,cAA5B,EAAgE;AAC9DZ,oCAA4B,KAAKK,OAAL,CAAaO,OAAb,cAA5B;AACD;AACDZ;;AAEA,WAAOA,OAAP;AACD,GA1B2C;;AA2B5Cc;AA3B4C,CAAvB,CAAvB;;AA8BA,oBAAUC,YAAV,CAAuBnB,cAAvB;;kBAEeA,c","file":"spark-http-error.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport extendError from 'extend-error';\nimport {HttpError} from '@ciscospark/http-core';\n\nconst SparkHttpError = extendError(HttpError, {\n  parseFn(res, ...rest) {\n    /* eslint prefer-reflect: [0] */\n    let message = HttpError.prototype.parseFn.call(this, res, ...rest);\n\n    Reflect.defineProperty(this, `options`, {\n      enumerable: false,\n      value: res.options\n    });\n\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n    if (this.options.headers && this.options.headers[`x-trans-id`]) {\n      message += `\\nX-Trans-Id: ${this.options.headers[`x-trans-id`]}`;\n    }\n    message += `\\n`;\n\n    return message;\n  },\n  subTypeName: `SparkHttpError`\n});\n\nHttpError.makeSubTypes(SparkHttpError);\n\nexport default SparkHttpError;\n"]}