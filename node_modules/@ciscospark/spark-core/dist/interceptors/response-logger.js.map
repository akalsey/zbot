{"version":3,"sources":["../../src/interceptors/response-logger.js"],"names":["ResponseLoggerInterceptor","options","response","now","Date","printResponseHeader","logger","console","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","log","getTime","toISOString","body","Buffer","isBuffer","inspect","depth","err","reason","error","reject","statusCode","$timings","networkEnd","networkStart","requestEnd","requestStart"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AACA;;;;AAEA;;;IAGqBA,yB;;;;;;;;;;;;AAQnB;;;;;;+BAMWC,O,EAASC,Q,EAAU;AAC5B,UAAMC,MAAM,IAAIC,IAAJ,EAAZ;AACA,WAAKC,mBAAL,CAAyBJ,OAAzB,EAAkCC,QAAlC;;AAEA,UAAMI,SAAS,mBAAIL,OAAJ,YAAuBM,OAAvB,CAAf;AACA,UAAIC,QAAQC,GAAR,CAAYC,8BAAhB,EAAgD;AAC9CJ,eAAOK,GAAP,sBAAgCR,IAAIS,OAAJ,EAAhC,EAA+CT,IAAIU,WAAJ,EAA/C;AACA,YAAI,OAAOX,SAASY,IAAhB,iBAAqCC,OAAOC,QAAP,CAAgBd,SAASY,IAAzB,CAAzC,EAAyE;AACvER,iBAAOK,GAAP;AACD,SAFD,MAGK,IAAI,OAAOT,SAASY,IAAhB,aAAJ,EAAuC;AAC1C,cAAI;AACFR,mBAAOK,GAAP,eAAyB,eAAKM,OAAL,CAAaf,SAASY,IAAtB,EAA4B,EAACI,OAAO,IAAR,EAA5B,CAAzB;AACD,WAFD,CAGA,OAAOC,GAAP,EAAY;AACVb,mBAAOK,GAAP,qCAA+CQ,GAA/C;AACD;AACF;AACF;AACDb,aAAOK,GAAP;;AAEA,aAAOT,QAAP;AACD;;AAED;;;;;;;;;oCAMgBD,O,EAASmB,M,EAAQ;AAC/B,UAAMjB,MAAM,IAAIC,IAAJ,EAAZ;AACA,WAAKC,mBAAL,CAAyBJ,OAAzB,EAAkCmB,MAAlC;;AAEA,UAAMd,SAAS,mBAAIL,OAAJ,YAAuBM,OAAvB,CAAf;AACA,UAAIC,QAAQC,GAAR,CAAYC,8BAAhB,EAAgD;AAC9CJ,eAAOK,GAAP,sBAAgCR,IAAIS,OAAJ,EAAhC,EAA+CT,IAAIU,WAAJ,EAA/C;AACA,YAAI;AACFP,iBAAOe,KAAP,eAA2B,eAAKJ,OAAL,CAAaG,OAAON,IAApB,EAA0B,EAACI,OAAO,IAAR,EAA1B,CAA3B;AACD,SAFD,CAGA,OAAOC,GAAP,EAAY;AACVb,iBAAOe,KAAP,eAA2BD,OAAON,IAAlC;AACD;AACF;AACDR,aAAOK,GAAP;;AAEA,aAAO,kBAAQW,MAAR,CAAeF,MAAf,CAAP;AACD;;AAED;;;;;;;;;wCAMoBnB,O,EAASC,Q,EAAU;AACrC,UAAMI,SAAS,mBAAIL,OAAJ,YAAuBM,OAAvB,CAAf;AACAD,aAAOK,GAAP,iBAA2BT,SAASqB,UAApC;AACAjB,aAAOK,GAAP,sBAAgC,mBAAIV,OAAJ,2BAAsC,mBAAIC,QAAJ,uBAAtE;AACAI,aAAOK,GAAP,sBAAgCV,QAAQuB,QAAR,CAAiBC,UAAjB,GAA8BxB,QAAQuB,QAAR,CAAiBE,YAA/E;AACApB,aAAOK,GAAP,yBAAmCV,QAAQuB,QAAR,CAAiBG,UAAjB,GAA8B1B,QAAQuB,QAAR,CAAiBI,YAAlF;AACD;;;;AA1ED;;;6BAGgB;AACd,aAAO,IAAI5B,yBAAJ,CAA8B,IAA9B,CAAP;AACD;;;0BAnBH;;;;;;kBAaqBA,yB","file":"response-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {get} from 'lodash';\nimport util from 'util';\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class ResponseLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {ResponseLoggerInterceptor}\n   */\n  static create() {\n    return new ResponseLoggerInterceptor(this);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const now = new Date();\n    this.printResponseHeader(options, response);\n\n    const logger = get(options, `logger`, console);\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.log(`timestamp (end): `, now.getTime(), now.toISOString());\n      if (typeof response.body === `string` || Buffer.isBuffer(response.body)) {\n        logger.log(`Response: `, `Not printed, it\\`s probably a file`);\n      }\n      else if (typeof response.body === `object`) {\n        try {\n          logger.log(`Response: `, util.inspect(response.body, {depth: null}));\n        }\n        catch (err) {\n          logger.log(`Response: `, `[Not Serializable]`, err);\n        }\n      }\n    }\n    logger.log(`\\\\**********************************************************************/`);\n\n    return response;\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Object} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const now = new Date();\n    this.printResponseHeader(options, reason);\n\n    const logger = get(options, `logger`, console);\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.log(`timestamp (end): `, now.getTime(), now.toISOString());\n      try {\n        logger.error(`Response: `, util.inspect(reason.body, {depth: null}));\n      }\n      catch (err) {\n        logger.error(`Response: `, reason.body);\n      }\n    }\n    logger.log(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Prints the basic header\n   * @param {Object} options\n   * @param {HttpResponse|SparkHttpError} response\n   * @returns {undefined}\n   */\n  printResponseHeader(options, response) {\n    const logger = get(options, `logger`, console);\n    logger.log(`Status Code:`, response.statusCode);\n    logger.log(`WEBEX_TRACKINGID:`, get(options, `headers.trackingid`) || get(response, `headers.trackingid`));\n    logger.log(`Network duration:`, options.$timings.networkEnd - options.$timings.networkStart);\n    logger.log(`Processing duration:`, options.$timings.requestEnd - options.$timings.requestStart);\n  }\n}\n"]}