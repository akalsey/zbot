{"version":3,"sources":["../../src/interceptors/request-timing.js"],"names":["RequestTimingInterceptor","options","$timings","requestStart","Date","now","requestEnd","requestFail","reject","response","resolve","reason"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;AAEA;;;IAGqBA,wB;;;;;;;;;;;;AASnB;;;;;8BAKUC,O,EAAS;AACjBA,cAAQC,QAAR,GAAmBD,QAAQC,QAAR,IAAoB,EAAvC;AACAD,cAAQC,QAAR,CAAiBC,YAAjB,GAAgCC,KAAKC,GAAL,EAAhC;AACA,aAAOJ,OAAP;AACD;;AAED;;;;;;;;mCAKeA,O,EAAS;AACtBA,cAAQC,QAAR,CAAiBI,UAAjB,GAA8BL,QAAQC,QAAR,CAAiBK,WAAjB,GAA+BH,KAAKC,GAAL,EAA7D;AACA,aAAO,kBAAQG,MAAR,CAAeP,OAAf,CAAP;AACD;;AAED;;;;;;;;;+BAMWA,O,EAASQ,Q,EAAU;AAC5BR,cAAQC,QAAR,CAAiBI,UAAjB,GAA8BF,KAAKC,GAAL,EAA9B;AACA,aAAO,kBAAQK,OAAR,CAAgBD,QAAhB,CAAP;AACD;;AAED;;;;;;;;;oCAMgBR,O,EAASU,M,EAAQ;AAC/BV,cAAQC,QAAR,CAAiBI,UAAjB,GAA8BL,QAAQC,QAAR,CAAiBK,WAAjB,GAA+BH,KAAKC,GAAL,EAA7D;AACA,aAAO,kBAAQG,MAAR,CAAeG,MAAf,CAAP;AACD;;;;AAjDD;;;;2BAIcV,O,EAAS;AACrB,aAAO,IAAID,wBAAJ,CAA6B,IAA7B,EAAmCC,OAAnC,CAAP;AACD;;;0BAlBH;;;;;;kBAWqBD,wB","file":"request-timing.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class RequestTimingInterceptor extends Interceptor {\n  /**\n   * @param {Object} options\n   * @returns {RequestTimingInterceptor}\n   */\n  static create(options) {\n    return new RequestTimingInterceptor(this, options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.$timings = options.$timings || {};\n    options.$timings.requestStart = Date.now();\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onRequestError\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequestError(options) {\n    options.$timings.requestEnd = options.$timings.requestFail = Date.now();\n    return Promise.reject(options);\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    options.$timings.requestEnd = Date.now();\n    return Promise.resolve(response);\n  }\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    options.$timings.requestEnd = options.$timings.requestFail = Date.now();\n    return Promise.reject(reason);\n  }\n}\n"]}