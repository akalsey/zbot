{"version":3,"sources":["../src/make-state-datatype.js"],"names":["makeStateDataType","Constructor","name","Error","dataType","set","newVal","parent","val","type","undefined","compare","currentValue","onChange","previousVal","attributeName","stopListening","_getCachedEventBubblingHandler","listenTo","prop","test"],"mappings":";;;;;kBAyBwBA,iB;AAzBxB;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOe,SAASA,iBAAT,CAA2BC,WAA3B,EAAwCC,IAAxC,EAA8C;AAC3D,MAAI,CAACD,WAAD,IAAgB,CAACC,IAArB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,2CAAN;AACD;;AAED,SAAO;AACLC,cAAU;AACRC,WAAK,SAASA,GAAT,CAAaC,MAAb,EAAqB;AACxB;AACA,YAAIA,kBAAkBL,WAAtB,EAAmC;AACjCK,iBAAOC,MAAP,GAAgB,IAAhB;AACA,iBAAO;AACLC,iBAAKF,MADA;AAELG,kBAAMP;AAFD,WAAP;AAID;;AAED;AACA;AACA;AACA;AACA,eAAO;AACLM,eAAKF,SAAS,IAAIL,WAAJ,CAAgBK,MAAhB,EAAwB,EAACC,QAAQ,IAAT,EAAxB,CAAT,GAAmDG,SADnD;AAELD,gBAAMP;AAFD,SAAP;AAID,OAnBO;AAoBRS,eAAS,SAASA,OAAT,CAAiBC,YAAjB,EAA+BN,MAA/B,EAAuC;AAC9C,eAAOM,iBAAiBN,MAAxB;AACD,OAtBO;AAuBRO,gBAAU,SAASA,QAAT,CAAkBP,MAAlB,EAA0BQ,WAA1B,EAAuCC,aAAvC,EAAsD;AAC9D;AACA;AACA;AACA,YAAID,WAAJ,EAAiB;AACf,eAAKE,aAAL,CAAmBF,WAAnB,SAAuC,KAAKG,8BAAL,CAAoCF,aAApC,CAAvC;AACD;;AAED,YAAIT,MAAJ,EAAY;AACV,eAAKY,QAAL,CAAcZ,MAAd,SAA6B,KAAKW,8BAAL,CAAoCF,aAApC,CAA7B;AACD;AACF;AAlCO,KADL;AAqCLI,UAAM;AACJ;;;;;;;AAOAC,YAAM,SAASA,IAAT,CAAcd,MAAd,EAAsB;AAC1B,YAAI,CAACA,MAAL,EAAa;AACX,iBAAO,KAAP;AACD;AACDA,eAAOC,MAAP,GAAgB,IAAhB;AACA,eAAO,KAAP;AACD,OAdG;AAeJE,YAAMP;AAfF;AArCD,GAAP;AAuDD","file":"make-state-datatype.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\n// Reminder: any class using this function must have something like the\n// following in its initialize method:\n//\n// // HACK to deal with the fact that AmpersandState#dataTypes#set is a pure\n// // function.\n// this._dataTypes = cloneDeep(this._dataTypes);\n// Object.keys(this._dataTypes).forEach(function bindSetter(key) {\n//   var dataType = this._dataTypes[key];\n//   if (dataType.set) {\n//     dataType.set = dataType.set.bind(this);\n//   }\n// }.bind(this));\n\n/**\n * Creates an ampersand state object that wires its event handlers like a an\n * ampersand child\n * @param {Function} Constructor\n * @param {string} name\n * @returns {Object}\n */\nexport default function makeStateDataType(Constructor, name) {\n  if (!Constructor || !name) {\n    throw new Error(`missing parameter for makeStateDataType`);\n  }\n\n  return {\n    dataType: {\n      set: function set(newVal) {\n        // newVal.parent = this;\n        if (newVal instanceof Constructor) {\n          newVal.parent = this;\n          return {\n            val: newVal,\n            type: name\n          };\n        }\n\n        // We only want to construct the new instance if we have some set of\n        // attributes (even an empty object) to base it on. This is to deal with\n        // the unexpected side effect that AmpState#unset will create a new\n        // instance.\n        return {\n          val: newVal ? new Constructor(newVal, {parent: this}) : undefined,\n          type: name\n        };\n      },\n      compare: function compare(currentValue, newVal) {\n        return currentValue === newVal;\n      },\n      onChange: function onChange(newVal, previousVal, attributeName) {\n        // Copied from ampersand-state.js\n        // if this has changed we want to also handle\n        // event propagation\n        if (previousVal) {\n          this.stopListening(previousVal, `all`, this._getCachedEventBubblingHandler(attributeName));\n        }\n\n        if (newVal) {\n          this.listenTo(newVal, `all`, this._getCachedEventBubblingHandler(attributeName));\n        }\n      }\n    },\n    prop: {\n      /**\n       * This is a really unfortunate hack to deal with ampersand`s decision to\n       * make the dateType#set function pure. The only function called with the\n       * scope of the parent at set time seems to be test\n       * @param {AmpersandState} newVal\n       * @returns {boolean}\n       */\n      test: function test(newVal) {\n        if (!newVal) {\n          return false;\n        }\n        newVal.parent = this;\n        return false;\n      },\n      type: name\n    }\n  };\n}\n"]}