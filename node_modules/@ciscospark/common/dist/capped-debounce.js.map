{"version":3,"sources":["../src/capped-debounce.js"],"names":["debounce","fn","wait","options","Error","maxWait","maxCalls","count","maxWaitTimer","waitTimer","wrapper","clearTimeout","setTimeout","exec"],"mappings":";;;;;;;;;;kBAcwBA,Q;;;;AAdxB;;;;;;AAMA;;;;;;;;AAQe,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAClD;;AAEA,MAAI,CAACF,EAAL,EAAS;AACP,UAAM,IAAIG,KAAJ,2BAAN;AACD;;AAED,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,sBAAN;AACD;;AAEDD,YAAUA,WAAW,EAArB;AACA,MAAI,CAACA,QAAQE,OAAb,EAAsB;AACpB,UAAM,IAAID,KAAJ,iCAAN;AACD;AACD,MAAI,CAACD,QAAQG,QAAb,EAAuB;AACrB,UAAM,IAAIF,KAAJ,kCAAN;AACD;;AAjBiD,iBAmBtBD,OAnBsB;AAAA,MAmB3CG,QAnB2C,YAmB3CA,QAnB2C;AAAA,MAmBjCD,OAnBiC,YAmBjCA,OAnBiC;;AAoBlD,MAAIE,QAAQ,CAAZ;AACA,MAAIC,qBAAJ;AAAA,MAAkBC,kBAAlB;;AAEA,SAAO,SAASC,OAAT,GAAmB;AACxBH,aAAS,CAAT;;AAEAI,iBAAaF,SAAb;AACAA,gBAAYG,WAAW;AAAA,aAAMC,MAAN;AAAA,KAAX,EAAyBX,IAAzB,CAAZ;;AAEA,QAAI,CAACM,YAAL,EAAmB;AACjBA,qBAAeI,WAAW;AAAA,eAAMC,MAAN;AAAA,OAAX,EAAyBR,OAAzB,CAAf;AACD;;AAED,QAAIE,QAAQD,QAAZ,EAAsB;AACpB,2BAAcO,IAAd,EAAoB,IAApB,EAA0B,EAA1B;AACD;AACF,GAbD;;AAeA;;;;AAIA,WAASA,IAAT,GAAgB;AACdF,iBAAaF,SAAb;AACAA,gBAAY,IAAZ;AACAE,iBAAaH,YAAb;AACAA,mBAAe,IAAf;AACAD,YAAQ,CAAR;;AAEA,yBAAcN,EAAd,EAAkB,IAAlB,EAAwB,EAAxB;AACD;AACF","file":"capped-debounce.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/**\n * Behaves like debounce, but additionally executes after a number of calls are\n * attempted, rather than just time\n * @param {Function} fn\n * @param {Number} wait\n * @param {Object} options\n * @returns {Function}\n */\nexport default function debounce(fn, wait, options) {\n  /* eslint no-invalid-this: [0] */\n\n  if (!fn) {\n    throw new Error(`\\`fn\\` must be a function`);\n  }\n\n  if (!wait) {\n    throw new Error(`\\`wait\\` is required`);\n  }\n\n  options = options || {};\n  if (!options.maxWait) {\n    throw new Error(`\\`options.maxWait\\` is required`);\n  }\n  if (!options.maxCalls) {\n    throw new Error(`\\`options.maxCalls\\` is required`);\n  }\n\n  const {maxCalls, maxWait} = options;\n  let count = 0;\n  let maxWaitTimer, waitTimer;\n\n  return function wrapper() {\n    count += 1;\n\n    clearTimeout(waitTimer);\n    waitTimer = setTimeout(() => exec(), wait);\n\n    if (!maxWaitTimer) {\n      maxWaitTimer = setTimeout(() => exec(), maxWait);\n    }\n\n    if (count > maxCalls) {\n      Reflect.apply(exec, this, []);\n    }\n  };\n\n  /**\n   * @private\n   * @returns {undefined}\n   */\n  function exec() {\n    clearTimeout(waitTimer);\n    waitTimer = null;\n    clearTimeout(maxWaitTimer);\n    maxWaitTimer = null;\n    count = 0;\n\n    Reflect.apply(fn, this, []);\n  }\n}\n"]}