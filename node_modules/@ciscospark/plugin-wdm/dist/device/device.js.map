{"version":3,"sources":["../../src/device/device.js"],"names":["Device","extend","children","features","idAttribute","namespace","props","intranetInactivityDuration","intranetInactivityCheckUrl","modificationTime","searchEncryptionKeyUrl","services","default","type","url","userId","webSocketUrl","derived","registered","deps","fn","Boolean","session","logoutTimer","lastUserActivityDate","determineService","key","serviceUrl","startsWith","resolve","substr","length","reject","Error","getServiceUrl","service","_getServiceUrl","then","isServiceUrl","getPreDiscoveryServiceUrl","config","preDiscoveryServices","initialize","args","prototype","forEach","collectionName","on","model","value","options","trigger","listenToAndRun","_resetLogoutTimer","listenTo","spark","Date","now","inspect","depth","serialize","isPreDiscoveryService","_isService","isPreDiscoveryServiceUrl","uri","_isServiceUrl","isService","isSpecificService","includes","target","indexOf","refresh","logger","info","register","request","method","body","res","_processRegistrationSuccess","catch","reason","statusCode","clear","resource","defaults","unregister","set","clearTimeout","unset","timer","setTimeout","logout","warn"],"mappings":"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","file":"device.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {omit} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\nimport {persist, waitForValue} from '@ciscospark/spark-core';\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  idAttribute: `url`,\n\n  namespace: `Device`,\n\n  props: {\n    intranetInactivityDuration: `number`,\n    intranetInactivityCheckUrl: `string`,\n    modificationTime: `string`,\n    searchEncryptionKeyUrl: `string`,\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: `object`\n    },\n    url: `string`,\n    userId: `string`,\n    webSocketUrl: `string`\n  },\n\n  derived: {\n    registered: {\n      deps: [`url`],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  session: {\n    // Fun Fact: setTimeout returns a Timer object instead of a Number in Node 6\n    logoutTimer: `any`,\n    lastUserActivityDate: `number`\n  },\n\n  @waitForValue(`@`)\n  determineService(url) {\n    for (const key of Object.keys(this.services)) {\n      const serviceUrl = this.services[key];\n      if (url.startsWith(serviceUrl)) {\n        // \"ServiceUrl\" is 10 characters\n        return Promise.resolve(key.substr(0, key.length - 10));\n      }\n    }\n\n    return Promise.reject(new Error(`${url} does not reflect a known service`));\n  },\n\n  @waitForValue(`@`)\n  getServiceUrl(service) {\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  @persist\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    [`developer`, `entitlement`, `user`].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger(`change`, this, options);\n        this.trigger(`change:features`, this, this.features, options);\n      });\n    });\n\n    this.listenToAndRun(this, `change:intranetInactivityCheckUrl`, () => this._resetLogoutTimer());\n    this.listenToAndRun(this, `change:intranetInactivityDuration`, () => this._resetLogoutTimer());\n    this.listenTo(this.spark, `user-activity`, () => {this.lastUserActivityDate = Date.now();});\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), `features`), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  @waitForValue(`@`)\n  isService(service) {\n    return this._isService(this.services, service)\n      .then((_isService) => _isService || this.isPreDiscoveryService(service));\n  },\n\n  @waitForValue(`@`)\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.services, uri));\n  },\n\n  @waitForValue(`@`)\n  isSpecificService(service, key) {\n    if (key === service) {\n      return Promise.resolve(true);\n    }\n\n    return this.getServiceUrl(service)\n      .then((serviceUrl) => key.includes(serviceUrl));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!target) {\n      return Promise.reject(new Error(`\\`target\\` is a required parameter`));\n    }\n\n    if (!service) {\n      return Promise.reject(new Error(`\\`service\\` is a required parameter`));\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    if (!uri) {\n      return Promise.reject(new Error(`\\`uri\\` is a required parameter`));\n    }\n\n    for (const key in target) {\n      if (target[key] && uri.indexOf(target[key]) === 0) {\n        return Promise.resolve(true);\n      }\n    }\n\n    return Promise.resolve(false);\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  refresh() {\n    this.logger.info(`device: refreshing`);\n\n    if (!this.registered) {\n      this.logger.info(`device: device not registered, refreshing`);\n      return this.register();\n    }\n\n    this.logger.info(`device: refreshing`);\n\n    return this.request({\n      method: `PUT`,\n      uri: this.url,\n      body: omit(this.serialize(), `features`, `mediaClusters`)\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info(`device: refresh failed with 404, attempting to register new device`);\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info(`device: registering`);\n\n    if (this.registered) {\n      this.logger.info(`device: device already registered, refreshing`);\n      return this.refresh();\n    }\n\n    return this.request({\n      method: `POST`,\n      service: `wdm`,\n      resource: `devices`,\n      body: this.config.defaults\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  },\n\n  @oneFlight\n  @waitForValue(`@`)\n  unregister() {\n    this.logger.info(`device: unregistering`);\n\n    if (!this.url) {\n      throw new Error(`device: not registered`);\n    }\n\n    return this.request({\n      uri: this.url,\n      method: `DELETE`\n    })\n      .then(() => this.clear());\n  },\n\n  _processRegistrationSuccess(res) {\n    this.logger.info(`device: received registration payload`);\n    this.set(res.body);\n  },\n\n  _resetLogoutTimer() {\n    clearTimeout(this.logoutTimer);\n    this.unset(`logoutTimer`);\n    if (this.intranetInactivityCheckUrl && this.intranetInactivityDuration) {\n      this.on(`change:lastUserActivityDate`, () => this._resetLogoutTimer());\n\n      const timer = setTimeout(() => {\n        this.spark.request({\n          method: `GET`,\n          uri: this.intranetInactivityCheckUrl\n        })\n          .catch(() => {\n            this.logger.info(`device: did not reach internal ping endpoint; logging out after inactivity on a public network`);\n            return this.spark.logout();\n          })\n          .catch((reason) => {\n            this.logger.warn(`device: logout failed`, reason);\n          });\n      }, this.intranetInactivityDuration * 1000);\n\n      this.logoutTimer = timer;\n    }\n  }\n});\n\nexport default Device;\n"]}