{"version":3,"sources":["../src/http-error-subtypes.js"],"names":["makeSubTypes","Base","NetworkOrCORSError","subTypeName","code","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","RequestEntityTooLarge","RequestUriTooLong","UnsupportedMediaType","RequestRangeNotSatisfiable","ExpectationFailed","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","select","statusCode","E","toString","split","shift","parseInt"],"mappings":"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","file":"http-error-subtypes.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport extendError from 'extend-error';\n\n/**\n * @param {Error} Base\n * @returns {undefined}\n */\nexport default function makeSubTypes(Base) {\n  const NetworkOrCORSError = extendError(Base, {\n    subTypeName: `NetworkOrCORSError`,\n    code: 0\n  });\n\n  const BadRequest = extendError(Base, {\n    subTypeName: `BadRequest`,\n    code: 400\n  });\n\n  const Unauthorized = extendError(BadRequest, {\n    subTypeName: `Unauthorized`,\n    code: 401\n  });\n\n  const PaymentRequired = extendError(BadRequest, {\n    subTypeName: `PaymentRequired`,\n    code: 402\n  });\n\n  const Forbidden = extendError(BadRequest, {\n    subTypeName: `Forbidden`,\n    code: 403\n  });\n\n  const NotFound = extendError(BadRequest, {\n    subTypeName: `NotFound`,\n    code: 404\n  });\n\n  const MethodNotAllowed = extendError(BadRequest, {\n    subTypeName: `MethodNotAllowed`,\n    code: 405\n  });\n\n  const NotAcceptable = extendError(BadRequest, {\n    subTypeName: `NotAcceptable`,\n    code: 406\n  });\n\n  const ProxyAuthenticationRequired = extendError(BadRequest, {\n    subTypeName: `ProxyAuthenticationRequired`,\n    code: 407\n  });\n\n  const RequestTimeout = extendError(BadRequest, {\n    subTypeName: `RequestTimeout`,\n    code: 408\n  });\n\n  const Conflict = extendError(BadRequest, {\n    subTypeName: `Conflict`,\n    code: 409\n  });\n\n  const Gone = extendError(BadRequest, {\n    subTypeName: `Gone`,\n    code: 410\n  });\n\n  const LengthRequired = extendError(BadRequest, {\n    subTypeName: `LengthRequired`,\n    code: 411\n  });\n\n  const PreconditionFailed = extendError(BadRequest, {\n    subTypeName: `PreconditionFailed`,\n    code: 412\n  });\n\n  const RequestEntityTooLarge = extendError(BadRequest, {\n    subTypeName: `RequestEntityTooLarge`,\n    code: 413\n  });\n\n  const RequestUriTooLong = extendError(BadRequest, {\n    subTypeName: `RequestUriTooLong`,\n    code: 414\n  });\n\n  const UnsupportedMediaType = extendError(BadRequest, {\n    subTypeName: `UnsupportedMediaType`,\n    code: 415\n  });\n\n  const RequestRangeNotSatisfiable = extendError(BadRequest, {\n    subTypeName: `RequestRangeNotSatisfiable`,\n    code: 416\n  });\n\n  const ExpectationFailed = extendError(BadRequest, {\n    subTypeName: `ExpectationFailed`,\n    code: 417\n  });\n\n  const InternalServerError = extendError(Base, {\n    subTypeName: `InternalServerError`,\n    code: 500\n  });\n\n  const NotImplemented = extendError(InternalServerError, {\n    subTypeName: `NotImplemented`,\n    code: 501\n  });\n\n  const BadGateway = extendError(InternalServerError, {\n    subTypeName: `BadGateway`,\n    code: 502\n  });\n\n  const ServiceUnavailable = extendError(InternalServerError, {\n    subTypeName: `ServiceUnavailable`,\n    code: 503\n  });\n\n  const GatewayTimeout = extendError(InternalServerError, {\n    subTypeName: `GatewayTimeout`,\n    code: 504\n  });\n\n  const HttpVersionNotSupported = extendError(InternalServerError, {\n    subTypeName: `HttpVersionNotSupported`,\n    code: 505\n  });\n\n  Object.assign(Base, {\n    0: NetworkOrCORSError,\n    NetworkOrCORSError,\n    400: BadRequest,\n    BadRequest,\n    401: Unauthorized,\n    Unauthorized,\n    402: PaymentRequired,\n    PaymentRequired,\n    403: Forbidden,\n    Forbidden,\n    404: NotFound,\n    NotFound,\n    405: MethodNotAllowed,\n    MethodNotAllowed,\n    406: NotAcceptable,\n    NotAcceptable,\n    407: ProxyAuthenticationRequired,\n    ProxyAuthenticationRequired,\n    408: RequestTimeout,\n    RequestTimeout,\n    409: Conflict,\n    Conflict,\n    410: Gone,\n    Gone,\n    411: LengthRequired,\n    LengthRequired,\n    412: PreconditionFailed,\n    PreconditionFailed,\n    413: RequestEntityTooLarge,\n    RequestEntityTooLarge,\n    414: RequestUriTooLong,\n    RequestUriTooLong,\n    415: UnsupportedMediaType,\n    UnsupportedMediaType,\n    416: RequestRangeNotSatisfiable,\n    RequestRangeNotSatisfiable,\n    417: ExpectationFailed,\n    ExpectationFailed,\n    500: InternalServerError,\n    InternalServerError,\n    501: NotImplemented,\n    NotImplemented,\n    502: BadGateway,\n    BadGateway,\n    503: ServiceUnavailable,\n    ServiceUnavailable,\n    504: GatewayTimeout,\n    GatewayTimeout,\n    505: HttpVersionNotSupported,\n    HttpVersionNotSupported,\n    select(statusCode) {\n      if (typeof statusCode === `undefined` || statusCode === null) {\n        return Base;\n      }\n\n      statusCode = statusCode.statusCode || statusCode;\n      const E = Base[statusCode];\n      if (E) {\n        return E;\n      }\n\n      // Fallback to the default for the category (e.g. BadRequest for 429)\n      statusCode = `${statusCode.toString().split(``).shift()}00`;\n      statusCode = parseInt(statusCode, 10);\n\n      return Base[statusCode] || Base;\n    }\n  });\n}\n"]}