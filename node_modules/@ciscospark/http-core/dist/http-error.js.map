{"version":3,"sources":["../src/http-error.js"],"names":["HttpError","parseFn","res","body","message","JSON","parse","parseObject","error","defaultMessage","enumerable","value","httpVersion","headers","rawHeaders","trailers","rawTrailers","method","url","statusCode","statusMessage","socket","_res","properties","subTypeName","messages","length","makeSubTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;AAGA;;;;AATA;;;;;AAaA,IAAMA,YAAY,2BAAY;AAC5BC,WAAS,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC7B;AACA,QAAIC,OAAOD,IAAIC,IAAf;AACA,QAAIC,gBAAJ;AACA,mBAAeD,IAAf,uDAAeA,IAAf;AACA;AACE,YAAI;AACFA,iBAAOE,KAAKC,KAAL,CAAWH,IAAX,CAAP;AACAC,oBAAUG,YAAYJ,IAAZ,CAAV;AACD,SAHD,CAIA,OAAOK,KAAP,EAAc;AACZJ,oBAAUD,IAAV;AACD;AACD;AACF;AACEC,kBAAUG,YAAYJ,IAAZ,CAAV;AACA;AACF;AACE;AAdF;;AAiBA,QAAI,CAACC,OAAL,EAAc;AACZA,gBAAU,KAAKK,cAAf;AACD;;AAED,oCAAwB,IAAxB,EAA8B;AAC5BN,YAAM;AACJO,oBAAY,KADR;AAEJC,eAAOR;AAFH,OADsB;AAK5BS,mBAAa;AACXF,oBAAY,KADD;AAEXC,eAAOT,IAAIU;AAFA,OALe;AAS5BC,eAAS;AACPH,oBAAY,KADL;AAEPC,eAAOT,IAAIW,OAAJ,IAAe;AAFf,OATmB;AAa5BC,kBAAY;AACVJ,oBAAY,KADF;AAEVC,eAAOT,IAAIY,UAAJ,IAAkB;AAFf,OAbgB;AAiB5BC,gBAAU;AACRL,oBAAY,KADJ;AAERC,eAAOT,IAAIa,QAAJ,IAAgB;AAFf,OAjBkB;AAqB5BC,mBAAa;AACXN,oBAAY,KADD;AAEXC,eAAOT,IAAIc,WAAJ,IAAmB;AAFf,OArBe;AAyB5BC,cAAQ;AACNP,oBAAY,KADN;AAENC,eAAOT,IAAIe;AAFL,OAzBoB;AA6B5BC,WAAK;AACHR,oBAAY,KADT;AAEHC,eAAOT,IAAIgB;AAFR,OA7BuB;AAiC5BC,kBAAY;AACVT,oBAAY,KADF;AAEVC,eAAOT,IAAIiB;AAFD,OAjCgB;AAqC5BC,qBAAe;AACbV,oBAAY,KADC;AAEbC,eAAOT,IAAIkB;AAFE,OArCa;AAyC5BC,cAAQ;AACNX,oBAAY,KADN;AAENC,eAAOT,IAAImB;AAFL,OAzCoB;AA6C5BC,YAAM;AACJZ,oBAAY,KADR;AAEJC,eAAOT;AAFH;AA7CsB,KAA9B;;AAmDA,WAAOE,OAAP;AACD,GA9E2B;AA+E5BmB,cAAY;AACVd;AADU,GA/EgB;AAkF5Be;AAlF4B,CAAZ,CAAlB;;AAqFA;;;;;AAKA,SAASjB,WAAT,CAAqBJ,IAArB,EAA2B;AACzB;AACA,MAAMsB,WAAW,sBAAc,oBAAKtB,IAAL,wEAAd,CAAjB;;AAEA;AACA,MAAIsB,SAASC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,yBAAevB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AAED;AACA,MAAMC,UAAUqB,SAAS,CAAT,CAAhB;;AAEA;AACA,MAAI,OAAOrB,OAAP,aAAJ,EAAiC;AAC/B,WAAOG,YAAYH,OAAZ,CAAP;AACD;;AAED;AACA,SAAOA,OAAP;AACD;;AAGD,iCAAaJ,SAAb;AACAA,UAAU2B,YAAV;;kBAEe3B,S","file":"http-error.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport extendError from 'extend-error';\nimport makeSubTypes from './http-error-subtypes';\nimport {pick} from 'lodash';\n\n/**\n * @class HttpError\n * @extends Error\n */\nconst HttpError = extendError({\n  parseFn: function parseFn(res) {\n    /* eslint complexity: [0] */\n    let body = res.body;\n    let message;\n    switch (typeof body) {\n    case `string`:\n      try {\n        body = JSON.parse(body);\n        message = parseObject(body);\n      }\n      catch (error) {\n        message = body;\n      }\n      break;\n    case `object`:\n      message = parseObject(body);\n      break;\n    default:\n      // do nothing\n    }\n\n    if (!message) {\n      message = this.defaultMessage;\n    }\n\n    Object.defineProperties(this, {\n      body: {\n        enumerable: false,\n        value: body\n      },\n      httpVersion: {\n        enumerable: false,\n        value: res.httpVersion\n      },\n      headers: {\n        enumerable: false,\n        value: res.headers || {}\n      },\n      rawHeaders: {\n        enumerable: false,\n        value: res.rawHeaders || []\n      },\n      trailers: {\n        enumerable: false,\n        value: res.trailers || {}\n      },\n      rawTrailers: {\n        enumerable: false,\n        value: res.rawTrailers || []\n      },\n      method: {\n        enumerable: false,\n        value: res.method\n      },\n      url: {\n        enumerable: false,\n        value: res.url\n      },\n      statusCode: {\n        enumerable: false,\n        value: res.statusCode\n      },\n      statusMessage: {\n        enumerable: false,\n        value: res.statusMessage\n      },\n      socket: {\n        enumerable: false,\n        value: res.socket\n      },\n      _res: {\n        enumerable: false,\n        value: res\n      }\n    });\n\n    return message;\n  },\n  properties: {\n    defaultMessage: `An error was received while trying to fulfill the request`\n  },\n  subTypeName: `HttpError`\n});\n\n/**\n * @param {object} body\n * @private\n * @returns {string}\n */\nfunction parseObject(body) {\n  // Search body for common names of error strings\n  const messages = Object.values(pick(body, `message`, `error`, `errorString`, `response`, `errorResponse`, `msg`));\n\n  // If no error candidate was found, stringify the entire body\n  if (messages.length === 0) {\n    return JSON.stringify(body, null, 2);\n  }\n\n  // Assume the first key found was the error explanation\n  const message = messages[0];\n\n  // If the explanation is an object, recurse and try again\n  if (typeof message === `object`) {\n    return parseObject(message);\n  }\n\n  // Return the first key\n  return message;\n}\n\n\nmakeSubTypes(HttpError);\nHttpError.makeSubTypes = makeSubTypes;\n\nexport default HttpError;\n"]}