{"version":3,"sources":["../../src/interceptors/http-status.js"],"names":["HttpStatusInterceptor","spark","options","ErrorConstructor","error","value","response","statusCode","resolve","reject","select"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;AAEA;;;AARA;;;;;IAWqBA,qB;;;AACnB;;;;;AAKA,iCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,oKACpBD,KADoB;;AAE1B,QAAME,mBAAmBD,YAAYA,QAAQE,KAAR,IAAiBF,QAAQC,gBAArC,wBAAzB;;AAEA,2CAA8B;AAC5BA,wBAAkB;AAChBE,eAAOF;AADS;AADU,KAA9B;AAJ0B;AAS3B;;AAED;;;;;;;;;;AAQA;;;;;+BAKWD,O,EAASI,Q,EAAU;AAC5B,UAAIA,SAASC,UAAT,IAAuBD,SAASC,UAAT,GAAsB,GAAjD,EAAsD;AACpD,eAAO,kBAAQC,OAAR,CAAgBF,QAAhB,CAAP;AACD;AACD;AACA;AACA;AACA,aAAO,kBAAQG,MAAR,CAAe,KAAK,KAAKN,gBAAL,CAAsBO,MAAtB,CAA6BJ,SAASC,UAAtC,CAAL,EAAwDD,QAAxD,CAAf,CAAP;AACD;;;2BAjBaJ,O,EAAS;AACrB,aAAO,IAAIF,qBAAJ,CAA0B,IAA1B,EAAgCE,OAAhC,CAAP;AACD;;;;;kBAvBkBF,qB","file":"http-status.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport HttpError from '../http-error';\nimport Interceptor from '../lib/interceptor';\n\n/**\n * @class\n */\nexport default class HttpStatusInterceptor extends Interceptor {\n  /**\n   * @param {Object} spark\n   * @param {Object} options\n   * @returns {HttpStatusInterceptor}\n   */\n  constructor(spark, options) {\n    super(spark);\n    const ErrorConstructor = options && (options.error || options.ErrorConstructor) || HttpError;\n\n    Object.defineProperties(this, {\n      ErrorConstructor: {\n        value: ErrorConstructor\n      }\n    });\n  }\n\n  /**\n   * @param {Object} options\n   * @returns {HttpStatusInterceptor}\n   */\n  static create(options) {\n    return new HttpStatusInterceptor(this, options);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Promise}\n   */\n  onResponse(options, response) {\n    if (response.statusCode && response.statusCode < 400) {\n      return Promise.resolve(response);\n    }\n    // Note: the extra parenthesis below are required to make sure `new` is\n    // applied to the correct method (i.e., the result of `select()`, not\n    // `select()` itself).\n    return Promise.reject(new (this.ErrorConstructor.select(response.statusCode))(response));\n  }\n}\n"]}