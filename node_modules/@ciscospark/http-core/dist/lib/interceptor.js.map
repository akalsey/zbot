{"version":3,"sources":["../../src/lib/interceptor.js"],"names":["Interceptor","attrs","forEach","key","value","enumerable","options","resolve","reason","reject","response","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA;;;IAGqBA,W;AACnB;;;;;AAKA,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,QAAIA,KAAJ,EAAW;AACT,0BAAYA,KAAZ,EAAmBC,OAAnB,CAA2B,UAACC,GAAD,EAAS;AAClC,YAAMC,QAAQH,MAAME,GAAN,CAAd;AACA,6CAA6BA,GAA7B,EAAkC;AAChCE,sBAAY,IADoB;AAEhCD;AAFgC,SAAlC;AAID,OAND;AAOD;AACF;;AAED;;;;;;;;;;AAQA;;;;;8BAKUE,O,EAAS;AACjB,aAAO,kBAAQC,OAAR,CAAgBD,OAAhB,CAAP;AACD;;AAED;;;;;;;;;mCAMeA,O,EAASE,M,EAAQ;AAC9B,aAAO,kBAAQC,MAAR,CAAeD,MAAf,CAAP;AACD;;AAED;;;;;;;;;+BAMWF,O,EAASI,Q,EAAU;AAC5B,aAAO,kBAAQH,OAAR,CAAgBG,QAAhB,CAAP;AACD;;AAED;;;;;;;;;oCAMgBJ,O,EAASE,M,EAAQ;AAC/B,aAAO,kBAAQC,MAAR,CAAeD,MAAf,CAAP;AACD;;;6BAzCe;AACd,YAAM,IAAIG,KAAJ,0CAAN;AACD;;;;;kBAxBkBX,W","file":"interceptor.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * @class\n */\nexport default class Interceptor {\n  /**\n   * @constructor\n   * @param {Object} attrs\n   * @returns {UrlInterceptor}\n   */\n  constructor(attrs) {\n    if (attrs) {\n      Object.keys(attrs).forEach((key) => {\n        const value = attrs[key];\n        Reflect.defineProperty(this, key, {\n          enumerable: true,\n          value\n        });\n      });\n    }\n  }\n\n  /**\n   * @abstract\n   * @returns {Interceptor}\n   */\n  static create() {\n    throw new Error(`\\`Interceptor.create()\\` must be defined`);\n  }\n\n  /**\n   * Transform request options before sending them\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  onRequest(options) {\n    return Promise.resolve(options);\n  }\n\n  /**\n   * Handle request failures\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {RejectedPromise<Error>}\n   */\n  onRequestError(options, reason) {\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Transform response before returning it\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Promise<HttpResponse>}\n   */\n  onResponse(options, response) {\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Handle response errors\n   * @param {Object} options\n   * @param {SparkHttpError} reason\n   * @returns {Promise<SparkHttpError>}\n   */\n  onResponseError(options, reason) {\n    return Promise.reject(reason);\n  }\n}\n"]}