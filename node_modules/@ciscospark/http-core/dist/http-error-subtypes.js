'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = makeSubTypes;

var _extendError = require('extend-error');

var _extendError2 = _interopRequireDefault(_extendError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {Error} Base
 * @returns {undefined}
 */
function makeSubTypes(Base) {
  var NetworkOrCORSError = (0, _extendError2.default)(Base, {
    subTypeName: 'NetworkOrCORSError',
    code: 0
  });

  var BadRequest = (0, _extendError2.default)(Base, {
    subTypeName: 'BadRequest',
    code: 400
  });

  var Unauthorized = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'Unauthorized',
    code: 401
  });

  var PaymentRequired = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'PaymentRequired',
    code: 402
  });

  var Forbidden = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'Forbidden',
    code: 403
  });

  var NotFound = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'NotFound',
    code: 404
  });

  var MethodNotAllowed = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'MethodNotAllowed',
    code: 405
  });

  var NotAcceptable = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'NotAcceptable',
    code: 406
  });

  var ProxyAuthenticationRequired = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'ProxyAuthenticationRequired',
    code: 407
  });

  var RequestTimeout = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'RequestTimeout',
    code: 408
  });

  var Conflict = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'Conflict',
    code: 409
  });

  var Gone = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'Gone',
    code: 410
  });

  var LengthRequired = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'LengthRequired',
    code: 411
  });

  var PreconditionFailed = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'PreconditionFailed',
    code: 412
  });

  var RequestEntityTooLarge = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'RequestEntityTooLarge',
    code: 413
  });

  var RequestUriTooLong = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'RequestUriTooLong',
    code: 414
  });

  var UnsupportedMediaType = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'UnsupportedMediaType',
    code: 415
  });

  var RequestRangeNotSatisfiable = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'RequestRangeNotSatisfiable',
    code: 416
  });

  var ExpectationFailed = (0, _extendError2.default)(BadRequest, {
    subTypeName: 'ExpectationFailed',
    code: 417
  });

  var InternalServerError = (0, _extendError2.default)(Base, {
    subTypeName: 'InternalServerError',
    code: 500
  });

  var NotImplemented = (0, _extendError2.default)(InternalServerError, {
    subTypeName: 'NotImplemented',
    code: 501
  });

  var BadGateway = (0, _extendError2.default)(InternalServerError, {
    subTypeName: 'BadGateway',
    code: 502
  });

  var ServiceUnavailable = (0, _extendError2.default)(InternalServerError, {
    subTypeName: 'ServiceUnavailable',
    code: 503
  });

  var GatewayTimeout = (0, _extendError2.default)(InternalServerError, {
    subTypeName: 'GatewayTimeout',
    code: 504
  });

  var HttpVersionNotSupported = (0, _extendError2.default)(InternalServerError, {
    subTypeName: 'HttpVersionNotSupported',
    code: 505
  });

  (0, _assign2.default)(Base, {
    0: NetworkOrCORSError,
    NetworkOrCORSError: NetworkOrCORSError,
    400: BadRequest,
    BadRequest: BadRequest,
    401: Unauthorized,
    Unauthorized: Unauthorized,
    402: PaymentRequired,
    PaymentRequired: PaymentRequired,
    403: Forbidden,
    Forbidden: Forbidden,
    404: NotFound,
    NotFound: NotFound,
    405: MethodNotAllowed,
    MethodNotAllowed: MethodNotAllowed,
    406: NotAcceptable,
    NotAcceptable: NotAcceptable,
    407: ProxyAuthenticationRequired,
    ProxyAuthenticationRequired: ProxyAuthenticationRequired,
    408: RequestTimeout,
    RequestTimeout: RequestTimeout,
    409: Conflict,
    Conflict: Conflict,
    410: Gone,
    Gone: Gone,
    411: LengthRequired,
    LengthRequired: LengthRequired,
    412: PreconditionFailed,
    PreconditionFailed: PreconditionFailed,
    413: RequestEntityTooLarge,
    RequestEntityTooLarge: RequestEntityTooLarge,
    414: RequestUriTooLong,
    RequestUriTooLong: RequestUriTooLong,
    415: UnsupportedMediaType,
    UnsupportedMediaType: UnsupportedMediaType,
    416: RequestRangeNotSatisfiable,
    RequestRangeNotSatisfiable: RequestRangeNotSatisfiable,
    417: ExpectationFailed,
    ExpectationFailed: ExpectationFailed,
    500: InternalServerError,
    InternalServerError: InternalServerError,
    501: NotImplemented,
    NotImplemented: NotImplemented,
    502: BadGateway,
    BadGateway: BadGateway,
    503: ServiceUnavailable,
    ServiceUnavailable: ServiceUnavailable,
    504: GatewayTimeout,
    GatewayTimeout: GatewayTimeout,
    505: HttpVersionNotSupported,
    HttpVersionNotSupported: HttpVersionNotSupported,
    select: function select(statusCode) {
      if (typeof statusCode === 'undefined' || statusCode === null) {
        return Base;
      }

      statusCode = statusCode.statusCode || statusCode;
      var E = Base[statusCode];
      if (E) {
        return E;
      }

      // Fallback to the default for the category (e.g. BadRequest for 429)
      statusCode = statusCode.toString().split('').shift() + '00';
      statusCode = parseInt(statusCode, 10);

      return Base[statusCode] || Base;
    }
  });
} /**!
   *
   * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
   */
//# sourceMappingURL=http-error-subtypes.js.map
