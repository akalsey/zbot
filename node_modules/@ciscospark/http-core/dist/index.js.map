{"version":3,"sources":["../src/index.js"],"names":["default","detect","detectSync","protorequest","defaultOptions","options","uri","arguments","forEach","prop","descriptor","enumerable","writable","json","logger","console","interceptors","create","defaults","request"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAwDQA,O;;;;;;;;;gDACAA,O;;;;;;;;;8CACAA,O;;;;AApDR;;;;;+CAqDQA,O;;;;;;;;;mBACAC,M;;;;;;mBAAQC,U;;;;;;AArDhB;;;;;;AAEA;AACA,IAAMC,eAAe,qBAAM,SAASA,YAAT,CAAsBC,cAAtB,EAAsCC,OAAtC,EAA+C;AACxE;AACA;AACA,MAAI,wBAASA,OAAT,CAAJ,EAAuB;AACrB,QAAMC,MAAMD,OAAZ;AACA;AACAA,cAAUE,UAAU,CAAV,KAAgB,EAA1B;AACAF,YAAQC,GAAR,GAAcA,GAAd;AACD;;AAED;AACA,mDAKEE,OALF,CAKU,UAACC,IAAD,EAAU;AAClB,QAAIC,aAAa,wCAAiCL,OAAjC,EAA0CI,IAA1C,CAAjB;AACAC,iBAAa,sBAAO,EAAP,EAAWA,UAAX,EAAuB;AAClCC,kBAAY,KADsB;AAElCC,gBAAU;AAFwB,KAAvB,CAAb;AAIA,kCAAuBP,OAAvB,EAAgCI,IAAhC,EAAsCC,UAAtC;AACD,GAZD;;AAcA,0BAAeL,OAAf,EAAwBD,cAAxB;;AAEA,MAAI,CAACC,QAAQQ,IAAb,EAAmB;AACjB,kCAAuBR,OAAvB;AACD;;AAEDA,UAAQS,MAAR,GAAiBT,QAAQS,MAAR,IAAkBC,OAAnC;;AAEA,SAAO,uBAASV,OAAT,CAAP;AACD,CAlCoB,CAArB,C,CAVA;;;;;AA8CA,IAAMD,iBAAiB;AACrBS,QAAM,IADe;AAErBG,gBAAc;AACZ;AACA,uBAAsBC,MAAtB,EAFY;AAFO,CAAvB;;AAQO,IAAMC,8BAAWf,YAAjB;AACA,IAAMgB,4BAAUhB,aAAaC,cAAb,CAAhB","file":"index.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {assign, curry, defaults as lodashDefaults, isString} from 'lodash';\nimport HttpStatusInterceptor from './interceptors/http-status';\nimport _request from './request';\n\n// Curry protorequest so we generate a function with default options built in.\nconst protorequest = curry(function protorequest(defaultOptions, options) {\n  // allow for options to be a string (and therefore expect options in the third\n  // position) to match request's api.\n  if (isString(options)) {\n    const uri = options;\n    /* eslint prefer-rest-params: [0] */\n    options = arguments[2] || {};\n    options.uri = uri;\n  }\n\n  // Hide useless elements from logs\n  [\n    `download`,\n    `interceptors`,\n    `logger`,\n    `upload`\n  ].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  if (!options.json) {\n    Reflect.deleteProperty(options, `json`);\n  }\n\n  options.logger = options.logger || console;\n\n  return _request(options);\n});\n\nconst defaultOptions = {\n  json: true,\n  interceptors: [\n    // Reminder: this is supposed to be an instantiated interceptor.\n    HttpStatusInterceptor.create()\n  ]\n};\n\nexport const defaults = protorequest;\nexport const request = protorequest(defaultOptions);\nexport {default as ProgressEvent} from './progress-event';\nexport {default as Interceptor} from './lib/interceptor';\nexport {default as HttpError} from './http-error';\nexport {default as HttpStatusInterceptor} from './interceptors/http-status';\nexport {detect, detectSync} from './lib/detect';\n"]}