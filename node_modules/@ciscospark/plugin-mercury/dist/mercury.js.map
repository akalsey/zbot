{"version":3,"sources":["../src/mercury.js"],"names":["normalReconnectReasons","Mercury","extend","namespace","session","connected","default","type","connecting","socket","derived","listening","deps","fn","connect","logger","info","resolve","spark","device","registered","register","then","_connectWithBackoff","disconnect","backoffCall","abort","removeAllListeners","once","close","listen","stopListening","_applyOverrides","event","headers","headerKeys","forEach","keyPath","_attemptConnection","callback","on","_onclose","_onmessage","args","_emit","credentials","getAuthorization","authorization","open","webSocketUrl","forceCloseDelay","config","pingInterval","pongTimeout","token","trackingId","sessionId","Date","now","catch","reason","code","getNumRetries","retries","refresh","error","reject","call","onComplete","err","undefined","setStrategy","ExponentialStrategy","initialDelay","backoffTimeReset","maxDelay","backoffTimeMax","maxRetries","failAfter","number","delay","Math","min","strategy_","nextBackoffDelay_","process","env","NODE_ENV","debug","stack","start","trigger","_getEventHandlers","eventType","split","name","handlers","handlerName","camelize","s","push","toLowerCase","unset","_reconnect","includes","envelope","data","ENABLE_MERCURY_LOGGING","reduce","promise","handler"],"mappings":"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","file":"mercury.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {deprecated} from 'core-decorators';\nimport {oneFlight} from '@ciscospark/common';\nimport {set} from 'lodash';\nimport S from 'string';\nimport backoff from 'backoff';\nimport Socket from './socket';\nimport {AuthorizationError} from './errors';\n\nconst normalReconnectReasons = [\n  `idle`,\n  `done (forced)`,\n  `pong not received`,\n  `pong mismatch`\n];\n\nconst Mercury = SparkPlugin.extend({\n  namespace: `Mercury`,\n\n  session: {\n    connected: {\n      default: false,\n      type: `boolean`\n    },\n    connecting: {\n      default: false,\n      type: `boolean`\n    },\n    socket: `object`\n  },\n\n  derived: {\n    listening: {\n      deps: [`connected`],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  @oneFlight\n  connect() {\n    if (this.connected) {\n      this.logger.info(`mercury: already connected, will not connect again`);\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n    return Promise.resolve(this.spark.device.registered || this.spark.device.register())\n      .then(() => {\n        this.logger.info(`mercury: connecting`);\n\n        return this._connectWithBackoff();\n      });\n  },\n\n  @oneFlight\n  disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info(`mercury: aborting connection`);\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners(`message`);\n        this.once(`offline`, resolve);\n        this.socket.close();\n        return;\n      }\n\n      resolve();\n    });\n  },\n\n  @deprecated(`Mercury#listen(): Use Mercury#connect() instead`)\n  listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n\n  @deprecated(`Mercury#stopListening(): Use Mercury#disconnect() instead`)\n  stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n\n  _applyOverrides(event) {\n    if (!event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _attemptConnection(callback) {\n    const socket = new Socket();\n    socket.on(`close`, (...args) => this._onclose(...args));\n    socket.on(`message`, (...args) => this._onmessage(...args));\n    socket.on(`sequence-mismatch`, (...args) => this._emit(`sequence-mismatch`, ...args));\n\n    this.spark.credentials.getAuthorization()\n      .then((authorization) => socket.open(this.spark.device.webSocketUrl, {\n        forceCloseDelay: this.config.forceCloseDelay,\n        pingInterval: this.config.pingInterval,\n        pongTimeout: this.config.pongTimeout,\n        token: authorization,\n        trackingId: `${this.spark.sessionId}_${Date.now()}`,\n        logger: this.logger\n      }))\n      .then(() => {\n        this.socket = socket;\n        callback();\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall.getNumRetries() > 0) {\n          this._emit(`connection_failed`, reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info(`mercury: connection attempt failed`, reason);\n        if (reason instanceof AuthorizationError) {\n          this.logger.info(`mercury: received authorization error, reauthorizing`);\n          return this.spark.refresh()\n            .then(() => callback(reason));\n        }\n\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: failed to handle connection failured`, reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff() {\n    return new Promise((resolve, reject) => {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate`);\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit(`online`);\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on(`abort`, () => {\n        this.logger.info(`mercury: connection aborted`);\n        reject();\n      });\n\n      call.on(`callback`, (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = Math.min(call.strategy_.nextBackoffDelay_, this.config.backoffTimeMax);\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === `development`) {\n            this.logger.debug(`mercury: `, err, err.stack);\n          }\n          return;\n        }\n        this.logger.info(`mercury: connected`);\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in event handler`, error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split(`.`);\n    const handlers = [];\n\n    if (!this.spark[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = S(`process_${name}_event`).camelize().s;\n    if (this.spark[namespace][handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      this.socket.removeAllListeners();\n      this.unset(`socket`);\n      this.connected = false;\n      this._emit(`offline`, event);\n\n      switch (event.code) {\n      case 1003:\n        // metric: disconnect\n        this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n        this._emit(`offline.permanent`, event);\n        break;\n      case 4000:\n        // metric: disconnect\n        this.logger.info(`mercury: socket replaced; will not reconnect`);\n        this._emit(`offline.replaced`, event);\n        break;\n      case 1001:\n      case 1005:\n      case 1006:\n      case 1011:\n        this.logger.info(`mercury: socket disconnected; reconnecting`);\n        this._emit(`offline.transient`, event);\n        this._reconnect();\n        // metric: disconnect\n        // if (code == 1011 && rason !== ping error) metric: unexpected disconnect\n        break;\n      case 1000:\n        if (normalReconnectReasons.includes(reason)) {\n          this.logger.info(`mercury: socket disconnected; reconnecting`);\n          this._emit(`offline.transient`, event);\n          this._reconnect();\n          // metric: disconnect\n          // if (reason === done forced) metric: force closure\n        }\n        else {\n          this.logger.info(`mercury: socket disconnected; will not reconnect`);\n          this._emit(`offline.permanent`, event);\n        }\n        break;\n      default:\n        this.logger.info(`mercury: socket disconnected unexpectedly; will not reconnect`);\n        // unexpected disconnect\n        this._emit(`offline.permanent`, event);\n      }\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in close handler`, error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug(`mercury: message envelope: `, envelope);\n    }\n\n    const data = envelope.data;\n    this._applyOverrides(data);\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n        return new Promise((resolve) => resolve(this.spark[namespace][name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit(`event`, event.data);\n        this._emit(`event:${data.eventType}`, envelope);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: error occurred processing socket message`, reason);\n      });\n  },\n\n  _reconnect() {\n    this.logger.info(`mercury: reconnecting`);\n    return this.connect();\n  }\n});\n\nexport default Mercury;\n"]}