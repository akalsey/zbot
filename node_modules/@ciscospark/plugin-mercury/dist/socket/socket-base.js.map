{"version":3,"sources":["../../src/socket/socket-base.js"],"names":["sockets","Socket","onmessage","bind","onclose","options","resolve","reject","logger","info","socket","get","readyState","code","Error","reason","closeTimer","setTimeout","error","warn","forceCloseDelay","event","clearTimeout","close","url","forEach","key","enumerable","value","includes","WebSocket","getWebSocketConstructor","binaryType","onopen","_authorize","then","catch","onerror","set","pongTimer","pingTimer","_fixCloseCode","emit","removeAllListeners","data","JSON","parse","sequenceNumber","parseInt","debug","expectedSequenceNumber","processedEvent","_acknowledge","type","send","messageId","id","v4","token","trackingId","logLevelToken","once","_ping","toLowerCase","confirmPongId","onPongNotReceived","scheduleNextPingAndCancelPongTimer","pingInterval","pongTimeout","bufferedAmount","extensions","protocol"],"mappings":"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","file":"socket-base.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\nimport {AuthorizationError, ConnectionError} from '../errors';\nimport {checkRequired} from '@ciscospark/common';\nimport {defaults, has, isObject} from 'lodash';\nimport uuid from 'uuid';\n\nconst sockets = new WeakMap();\n\n/**\n * Generalized socket abstraction\n */\nexport default class Socket extends EventEmitter {\n  /**\n   * constructor\n   * @returns {Socket}\n   */\n  constructor() {\n    super();\n    this.onmessage = this.onmessage.bind(this);\n    this.onclose = this.onclose.bind(this);\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get binaryType() {\n    return sockets.get(this).binaryType;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {number}\n   */\n  get bufferedAmount() {\n    return sockets.get(this).bufferedAmount;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get extensions() {\n    return sockets.get(this).extensions;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get protocol() {\n    return sockets.get(this).protocol;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {number}\n   */\n  get readyState() {\n    return sockets.get(this).readyState;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @returns {string}\n   */\n  get url() {\n    return sockets.get(this).url;\n  }\n\n  /**\n   * Provides the environmentally appropriate constructor (ws in NodeJS,\n   * WebSocket in browsers)\n   * @returns {WebSocket}\n   */\n  static getWebSocketConstructor() {\n    throw new Error(`Socket.getWebSocketConstructor() must be implemented in an environmentally appropriate way`);\n  }\n\n  /**\n   * Closes the socket\n   * @param {Object} options\n   * @param {string} options.reason\n   * @param {number} options.code\n   * @returns {Promise}\n   */\n  close(options) {\n    return new Promise((resolve, reject) => {\n      this.logger.info(`socket: closing`);\n      const socket = sockets.get(this);\n      if (socket.readyState === 2 || socket.readyState === 3) {\n        this.logger.info(`socket: already closed`);\n        resolve();\n        return;\n      }\n\n      options = options || {};\n      if (options.code && options.code !== 1000 && (options.code < 3000 || options.code > 4999)) {\n        reject(new Error(`\\`options.code\\` must be 1000 or between 3000 and 4999 (inclusive)`));\n        return;\n      }\n\n      options = defaults(options, {\n        code: 1000,\n        reason: `Done`\n      });\n\n      const closeTimer = setTimeout(() => {\n        try {\n          this.logger.info(`socket: no close event received, forcing closure`);\n          resolve(this.onclose({\n            code: 1000,\n            reason: `Done (forced)`\n          }));\n        }\n        catch (error) {\n          this.logger.warn(`socket: force-close failed`, error);\n        }\n      }, this.forceCloseDelay);\n\n      socket.onclose = (event) => {\n        this.logger.info(`socket: close event fired`, event.code, event.reason);\n        clearTimeout(closeTimer);\n        this.onclose(event);\n        resolve(event);\n      };\n\n      socket.close(options.code, options.reason);\n\n      return;\n    });\n  }\n\n  /**\n   * Opens a WebSocket\n   * @param {string} url\n   * @param {options} options\n   * @param {number} options.forceCloseDelay (required)\n   * @param {number} options.pingInterval (required)\n   * @param {number} options.pongTimeout (required)\n   * @param {string} options.token (required)\n   * @param {string} options.trackingId (required)\n   * @param {Logger} options.logger (required)\n   * @param {string} options.logLevelToken\n   * @returns {Promise}\n   */\n  open(url, options) {\n    return new Promise((resolve, reject) => {\n      /* eslint complexity: [0] */\n      if (!url) {\n        reject(new Error(`\\`url\\` is required`));\n        return;\n      }\n\n      if (sockets.get(this)) {\n        reject(new Error(`Socket#open() can only be called once per instance`));\n        return;\n      }\n\n      options = options || {};\n\n      checkRequired([\n        `forceCloseDelay`,\n        `pingInterval`,\n        `pongTimeout`,\n        `token`,\n        `trackingId`,\n        `logger`\n      ], options);\n\n      Object.keys(options).forEach((key) => {\n        Reflect.defineProperty(this, key, {\n          enumerable: false,\n          value: options[key]\n        });\n      });\n\n      /* istanbul ignore else */\n      if (!url.includes(`outboundWireFormat=text`)) {\n        url += `${url.includes(`?`) ? `&` : `?`}outboundWireFormat=text`;\n      }\n\n      // always add buffer_states query param\n      /* istanbul ignore else */\n      if (!url.includes(`bufferStates`)) {\n        url += `${url.includes(`?`) ? `&` : `?`}bufferStates=true`;\n      }\n\n      const WebSocket = Socket.getWebSocketConstructor();\n\n      this.logger.info(`socket: creating WebSocket`);\n      const socket = new WebSocket(url);\n      socket.binaryType = `arraybuffer`;\n      socket.onmessage = this.onmessage;\n\n      socket.onclose = (event) => {\n        this.logger.info(`socket: closed while connecting`, event.code, event.reason);\n        if (event.code === 1008) {\n          return reject(new AuthorizationError(event));\n        }\n        return reject(new ConnectionError(event));\n      };\n\n      socket.onopen = () => {\n        this.logger.info(`socket: connected`);\n        this._authorize()\n          .then(() => {\n            this.logger.info(`socket: authorized`);\n            socket.onclose = this.onclose;\n            resolve();\n          })\n          .catch(reject);\n      };\n\n      socket.onerror = (event) => {\n        this.logger.warn(`socket: error event fired`, event);\n      };\n\n      sockets.set(this, socket);\n      this.logger.info(`socket: waiting for server`);\n      return;\n    });\n  }\n\n  /**\n   * Handles incoming CloseEvents\n   * @param {CloseEvent} event\n   * @returns {undefined}\n   */\n  onclose(event) {\n    this.logger.info(`socket: closed`, event.code, event.reason);\n    clearTimeout(this.pongTimer);\n    clearTimeout(this.pingTimer);\n\n    event = this._fixCloseCode(event);\n    this.emit(`close`, event);\n\n    // Remove all listeners to (a) avoid reacting to late pongs and (b) ensure\n    // we don't have a retain cycle.\n    this.removeAllListeners();\n  }\n\n  /**\n   * Handles incoming message events\n   * @param {MessageEvent} event\n   * @returns {undefined}\n   */\n  onmessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      const sequenceNumber = parseInt(data.sequenceNumber, 10);\n      this.logger.debug(`socket: sequence number: `, sequenceNumber);\n      if (this.expectedSequenceNumber && sequenceNumber !== this.expectedSequenceNumber) {\n        this.logger.debug(`socket: sequence number mismatch indicates lost mercury message. expected: ${this.expectedSequenceNumber}, actual: ${sequenceNumber}`);\n        this.emit(`sequence-mismatch`, sequenceNumber, this.expectedSequenceNumber);\n      }\n      this.expectedSequenceNumber = sequenceNumber + 1;\n\n      // Yes, it's a little weird looking; we want to emit message events that\n      // look like normal socket message events, but event.data cannot be\n      // modified and we don't actually care about anything but the data property\n      const processedEvent = {data};\n      this._acknowledge(processedEvent);\n      if (data.type === `pong`) {\n        this.emit(`pong`, processedEvent);\n      }\n      else {\n        this.emit(`message`, processedEvent);\n      }\n    }\n    catch (error) {\n      // The above code should only be able to throw if we receive an unparsable\n      // message from Mercury. At this time, the only action we have is to\n      // ignore it and move on.\n      /* istanbul ignore next */\n      this.logger.warn(`socket: error while receiving WebSocket message`, error);\n    }\n  }\n\n  /**\n   * Sends a message up the socket\n   * @param {mixed} data\n   * @returns {Promise}\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n      if (this.readyState !== 1) {\n        return reject(new Error(`INVALID_STATE_ERROR`));\n      }\n\n      if (isObject(data)) {\n        data = JSON.stringify(data);\n      }\n\n      const socket = sockets.get(this);\n      socket.send(data);\n      return resolve();\n    });\n  }\n\n  /**\n   * Sends an acknowledgment for a specific event\n   * @param {MessageEvent} event\n   * @returns {Promise}\n   */\n  _acknowledge(event) {\n    if (!event) {\n      return Promise.reject(new Error(`\\`event\\` is required`));\n    }\n\n    if (!has(event, `data.id`)) {\n      return Promise.reject(new Error(`\\`event.data.id\\` is required`));\n    }\n\n    return this.send({\n      messageId: event.data.id,\n      type: `ack`\n    });\n  }\n\n  /**\n   * Sends an auth message up the socket\n   * @private\n   * @returns {Promise}\n   */\n  _authorize() {\n    return new Promise((resolve, reject) => {\n      this.logger.info(`socket: authorizing`);\n      this.send({\n        id: uuid.v4(),\n        type: `authorization`,\n        data: {\n          token: this.token\n        },\n        trackingId: this.trackingId,\n        logLevelToken: this.logLevelToken\n      });\n\n      const id = uuid.v4();\n      this.once(`pong`, (event) => {\n        try {\n          if (event.data.id === id) {\n            this._ping();\n            return resolve();\n          }\n          return reject(new Error(`socket: received response to wrong ping`));\n        }\n        catch (error) {\n          // This try/catch block was added as a debugging step; to the best of\n          // my knowledge, the above can never throw.\n          /* istanbul ignore next */\n          this.logger.error(`socket: failed to receive initial pong`, error);\n          /* istanbul ignore next */\n          return reject(error);\n        }\n      });\n\n      this.send({\n        id,\n        type: `ping`\n      });\n    });\n  }\n\n  /**\n   * Deals with the fact that some browsers drop some close codes (but not\n   * close reasons).\n   * @param {CloseEvent} event\n   * @private\n   * @returns {CloseEvent}\n   */\n  _fixCloseCode(event) {\n    if (event.code === 1005 && event.reason) {\n      switch (event.reason.toLowerCase()) {\n      case `replaced`:\n        this.logger.info(`socket: fixing CloseEvent code for reason: `, event.reason);\n        event.code = 4000;\n        break;\n      case `authentication failed`:\n      case `authentication did not happen within the timeout window of 30000 seconds.`:\n        this.logger.info(`socket: fixing CloseEvent code for reason: `, event.reason);\n        event.code = 1008;\n        break;\n      default:\n        // do nothing\n      }\n    }\n\n    return event;\n  }\n\n  /**\n   * Sends a ping up the socket and confirms we get it back\n   * @param {[type]} id\n   * @private\n   * @returns {[type]}\n   */\n  _ping(id) {\n    const confirmPongId = (event) => {\n      try {\n        this.logger.debug(`socket: pong`, event.data.id);\n        if (event.data && event.data.id !== id) {\n          this.logger.info(`socket: received pong for wrong ping id, closing socket`);\n          this.logger.debug(`socket: expected`, id, `received`, event.data.id);\n          this.close({\n            code: 1000,\n            reason: `Pong mismatch`\n          });\n        }\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error(`socket: error occurred in confirmPongId`, error);\n      }\n    };\n\n    const onPongNotReceived = () => {\n      try {\n        this.logger.info(`socket: pong not receive in expected period, closing socket`);\n        this.close({\n          code: 1000,\n          reason: `Pong not received`\n        })\n          .catch((reason) => {\n            this.logger.warn(`socket: failed to close socket after missed pong`, reason);\n          });\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error(`socket: error occurred in onPongNotReceived`, error);\n      }\n    };\n\n    const scheduleNextPingAndCancelPongTimer = () => {\n      try {\n        clearTimeout(this.pongTimer);\n        this.pingTimer = setTimeout(() => this._ping(), this.pingInterval);\n      }\n      catch (error) {\n        // This try/catch block was added as a debugging step; to the best of my\n        // knowledge, the above can never throw.\n        /* istanbul ignore next */\n        this.logger.error(`socket: error occurred in scheduleNextPingAndCancelPongTimer`, error);\n      }\n    };\n\n    id = id || uuid.v4();\n    this.pongTimer = setTimeout(onPongNotReceived, this.pongTimeout);\n    this.once(`pong`, scheduleNextPingAndCancelPongTimer);\n    this.once(`pong`, confirmPongId);\n\n    this.logger.info(`socket: ping ${id}`);\n    return this.send({\n      id,\n      type: `ping`\n    });\n  }\n}\n"]}