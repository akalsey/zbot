{"version":3,"sources":["../src/phone.js"],"names":["Phone","extend","derived","connected","deps","cache","fn","Boolean","spark","mercury","registered","device","url","namespace","register","refresh","then","connect","locus","list","loci","forEach","trigger","make","parent","deregister","disconnect","createLocalMediaStream","options","constraints","audio","video","initialize","args","prototype","key","listenTo","event","_onLocusEvent","data","dial","dialString","call"],"mappings":"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","file":"phone.js","sourcesContent":["/**!\n *\n * Copyright (c) 2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {eventKeys} from '@ciscospark/plugin-locus';\nimport {defaults} from 'lodash';\nimport Call from './call';\nimport {shouldRing} from './state-parsers';\nimport {getUserMedia} from './webrtc';\n\n/**\n * Incoming Call Event\n *\n * Emitted when a call begins and when {@link Phone#register} is invoked and\n * there are active calls.\n *\n * @event call:incoming\n * @instance\n * @memberof Phone\n * @type {Object}\n * @property {Call} call The incoming call\n */\n\n/**\n * @class\n * @extends SparkPlugin\n * The calling feature in the SDK is currently available in limited beta. If you'd like to join the beta program and share your feedback, please visit the [developer portal](https://developer.ciscospark.com/sdkaccess/). If you qualify, a Cisco employee will reach out to you.\n */\nconst Phone = SparkPlugin.extend({\n  derived: {\n    /**\n     * connected Indicates whether or not the WebSocket is connected\n     * @instance\n     * @memberof Phone\n     * @member {Boolean}\n     * @readonly\n     */\n    connected: {\n      deps: [`parent.mercury.connected`],\n      // FIXME this prop must be cacheable so it can emit change events\n      cache: false,\n      fn() {\n        return Boolean(this.spark.mercury.connected);\n      }\n    },\n    /**\n     * indicates whether or not the client is registered with the Cisco Spark\n     * cloud\n     * @instance\n     * @memberof Phone\n     * @member {Boolean}\n     * @readonly\n     */\n    registered: {\n      deps: [\n        `parent.device.url`,\n        `connected`\n      ],\n      // FIXME this prop must be cacheable so it can emit change events\n      cache: false,\n      fn() {\n        return Boolean(this.spark.device.url && this.connected);\n      }\n    }\n  },\n\n  namespace: `phone`,\n\n  /**\n   * Registers the client with the Cisco Spark cloud and starts listening for\n   * WebSocket events.\n   *\n   * Subsequent calls refresh the device registration.\n   * @instance\n   * @memberof Phone\n   * @returns {Promise}\n   */\n  register() {\n    // Ideally, we could call spark.refresh via spark-core, but it doesn't know\n    // about the wdm plugin, and all of the leaky abstractions I can think of\n    // seem risky.\n    return this.spark.device.refresh()\n      .then(() => this.spark.mercury.connect())\n      .then(() => this.spark.locus.list())\n      .then((loci) => {\n        loci.forEach((locus) => {\n          this.trigger(`call:incoming`, Call.make({\n            locus\n          }, {\n            parent: this.spark\n          }));\n        });\n      });\n  },\n\n  /**\n   * Disconnects from WebSocket and unregisters from the Cisco Spark cloud.\n   *\n   * Subsequent calls will be a noop.\n   * @instance\n   * @memberof Phone\n   * @returns {Promise}\n   */\n  deregister() {\n    // TODO figure out how to hangup all calls (or possibly just disconnect all\n    // streams)\n    return this.spark.mercury.disconnect();\n  },\n\n  /**\n   * Create a MediaStream to be used for video preview.\n   *\n   * Note: You must explicitly pass the resultant stream to {@link Call#answer()}\n   * or {@link Phone#dial()}\n   * @instance\n   * @memberof Phone\n   * @param {Object|MediaStreamConstraints} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise<MediaStream>}\n   */\n  createLocalMediaStream(options) {\n    // TODO need to figure out a way to manage the stream internally. currently,\n    // misuse makes it really easy to lock the camera in the on state.\n    options = options || {};\n    const constraints = options.constraints || options;\n    defaults(constraints, {\n      audio: true,\n      video: true\n    });\n\n    return getUserMedia(constraints);\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Phone\n   * @param {Object} attrs\n   * @param {Object} options\n   * @private\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    eventKeys.forEach((key) => {\n      this.listenTo(this.spark.mercury, `event:${key}`, (event) => this._onLocusEvent(event));\n    });\n  },\n\n  /**\n   * Determines if the {@link call:incoming} event should be emitted for the\n   * specifed {@link Types~MercuryEvent}\n   * @emits call:incoming\n   * @instance\n   * @memberof Phone\n   * @param {Types~MercuryEvent} event\n   * @returns {undefined}\n   */\n  _onLocusEvent(event) {\n    if (shouldRing(event, this.spark)) {\n      this.trigger(`call:incoming`, Call.make({\n        locus: event.data.locus\n      }, {\n        parent: this.spark\n      }));\n    }\n  },\n\n  /**\n   * Place a call to the specified dialString. A dial string may be an email\n   * address or sip uri.\n   * @instance\n   * @memberof Phone\n   * @param {string} dialString\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @param {MediaStream} options.localMediaStream if no stream is specified, a\n   * new one will be created based on options.constraints\n   * @returns {Call}\n   */\n  dial(dialString, options) {\n    // TODO call register if it has not been called.\n    const call = Call.make({}, {parent: this.spark});\n\n    call.dial(dialString, options);\n    return call;\n  }\n});\n\nexport default Phone;\n"]}