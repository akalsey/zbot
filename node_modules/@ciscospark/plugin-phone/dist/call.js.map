{"version":3,"sources":["../src/call.js"],"names":["Call","extend","namespace","session","locus","pc","localMediaStream","localMediaStreamUrl","remoteMediaStream","remoteMediaStreamUrl","sendingAudio","sendingVideo","receivingAudio","receivingVideo","wasSendingAudio","wasSendingVideo","wasReceivingAudio","wasReceivingVideo","derived","isActive","deps","fn","activeParticipants","activeParticipantsCount","length","joined","default","joinedOnThisDevice","spark","locusUrl","url","device","self","devices","item","mediaConnection","mediaConnections","mediaId","remoteAudioMuted","remote","remoteVideoMuted","direction","from","local","to","status","state","localAudioDirection","toLowerCase","localVideoDirection","remoteAudioDirection","remoteVideoDirection","initialize","args","prototype","forEach","key","listenTo","mercury","event","_onLocusEvent","on","stopListening","off","URL","revokeObjectURL","RTCPeerConnection","iceServers","ontrack","streams","createObjectURL","trigger","logger","info","hangup","previousLocus","previousAttributes","answer","options","_join","then","acknowledge","alert","_setLocus","dial","invitee","catch","reason","when","_hangup","leave","set","decline","reject","startSendingAudio","_changeMedia","startSendingVideo","startReceivingAudio","startReceivingVideo","toggleReceivingAudio","stopReceivingAudio","toggleReceivingVideo","stopReceivingVideo","toggleSendingAudio","stopSendingAudio","toggleSendingVideo","stopSendingVideo","sendFeedback","feedback","metrics","submit","constraints","resolve","promises","push","all","_updateMedia","unset","locusMethodName","target","audio","video","recvOnly","offerOptions","offerToReceiveAudio","offerToReceiveVideo","promise","phone","createLocalMediaStream","offer","localSdp","JSON","parse","remoteSdp","sdp","data","eventType","incoming","current","action","compare","get","process","nextTick","updateMedia","audioMuted","videoMuted","make","attrs"],"mappings":"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","file":"call.js","sourcesContent":["/**!\n *\n * Copyright (c) 2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint-env browser: true */\n/* global RTCPeerConnection, RTCSessionDescription */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {oneFlight, tap} from '@ciscospark/common';\nimport {\n  createOffer,\n  acceptAnswer,\n  end,\n  mediaDirection as mediaDirectionFromPeerConnection,\n  addStream,\n  stopSendingAudio,\n  stopSendingVideo,\n  startSendingAudio,\n  startSendingVideo,\n  stopReceivingAudio,\n  stopReceivingVideo,\n  startReceivingAudio,\n  startReceivingVideo\n} from './webrtc';\nimport {\n  eventKeys,\n  USE_INCOMING,\n  FETCH\n} from '@ciscospark/plugin-locus';\nimport {\n  activeParticipants,\n  direction,\n  isActive,\n  joined,\n  joinedOnThisDevice,\n  participantIsJoined,\n  remoteAudioMuted,\n  remoteParticipant,\n  remoteVideoMuted\n} from './state-parsers';\nimport {defaults, find} from 'lodash';\n\n/**\n * @event ringing\n * @instance\n * @memberof Call\n */\n\n/**\n * @event connected\n * @instance\n * @memberof Call\n */\n\n/**\n * @event disconnected\n * @instance\n * @memberof Call\n */\n\n/**\n * @event localMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event remoteMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event error\n * @instance\n * @memberof Call\n */\n\n/**\n * Payload for {@link Call#sendFeedback}\n * @typedef {Object} Types~Feedback\n * @property {number} userRating Number between 1 and 5 (5 being best) to let\n * the user score the call\n * @property {string} userComments Freeform feedback from the user about the\n * call\n * @property {Boolean} includeLogs set to true to submit client logs to the\n * Cisco Spark cloud. Note: at this time, all logs, not just call logs,\n * generated by the sdk will be uploaded to the Spark Cloud. Care has been taken\n * to avoid including PII in these logs, but if you've taken advantage of the\n * SDK's logger, you should make sure to avoid logging PII as well.\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst Call = SparkPlugin.extend({\n  namespace: `Phone`,\n\n  session: {\n    locus: `object`,\n    pc: `object`,\n    /**\n     * Returns the local MediaStream for the call. May initially be `null`\n     * between the time @{Phone#dial is invoked and the  media stream is\n     * acquired if {@link Phone#dial} is invoked without a `localMediaStream`\n     * option.\n     *\n     * This property can also be set mid-call in which case the streams sent to\n     * the remote party are replaced by this stream. On success, the\n     * {@link Call}'s {@link localMediaStream:change} event fires, notifying any\n     * listeners that we are now sending media from a new source.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    localMediaStream: `object`,\n    // TODO determine if stream URLs can be deprecated; it looks like the video\n    // tag may accept streams directly these days.\n    /**\n     * Object URL that refers to {@link Call#localMediaStream}. Will be\n     * automatically deallocated when the call ends\n     * @instance\n     * @memberof Call\n     * @member {string}\n     */\n    localMediaStreamUrl: `string`,\n    /**\n     * Access to the remote party’s `MediaStream`. `null` before connected.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    remoteMediaStream: `object`,\n    /**\n     * Object URL that refers to {@link Call#remoteMediaStream}. Will be\n     * automatically deallocated when the call ends\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    remoteMediaStreamUrl: `string`,\n    /**\n     * Indicates if the client is sending audio\n     * @instance\n     * @memberof Call\n     * @member {Boolean}\n     * @readonly\n     */\n    sendingAudio: `boolean`,\n    /**\n     * Indicates if the client is sending video\n     * @instance\n     * @memberof Call\n     * @member {Boolean}\n     * @readonly\n     */\n    sendingVideo: `boolean`,\n    /**\n     * Indicates if the client is receiving audio\n     * @instance\n     * @memberof Call\n     * @member {Boolean}\n     * @readonly\n     */\n    receivingAudio: `boolean`,\n    /**\n     * Indicates if the client is receiving video\n     * @instance\n     * @memberof Call\n     * @member {Boolean}\n     * @readonly\n     */\n    receivingVideo: `boolean`,\n\n    wasSendingAudio: `boolean`,\n    wasSendingVideo: `boolean`,\n    wasReceivingAudio: `boolean`,\n    wasReceivingVideo: `boolean`\n  },\n\n  // FIXME in its current form, any derived property that is an object will emit\n  // a change event everytime a locus gets replaced, even if no values change\n  derived: {\n    isActive: {\n      deps: [`locus`],\n      fn() {\n        return this.locus && isActive(this.locus);\n      }\n    },\n    activeParticipants: {\n      deps: [`locus`],\n      fn() {\n        return activeParticipants(this.locus);\n      }\n    },\n    activeParticipantsCount: {\n      deps: [`activeParticipants`],\n      fn() {\n        return this.activeParticipants.length;\n      }\n    },\n    joined: {\n      deps: [`locus`],\n      default: false,\n      fn() {\n        return this.locus && joined(this.locus);\n      }\n    },\n    joinedOnThisDevice: {\n      deps: [`locus`],\n      default: false,\n      fn() {\n        return this.locus && joinedOnThisDevice(this.spark, this.locus);\n      }\n    },\n    locusUrl: {\n      deps: [`locus`],\n      fn() {\n        return this.locus.url;\n      }\n    },\n    device: {\n      deps: [`locus`],\n      fn() {\n        return this.locus.self && find(this.locus.self.devices, (item) => item.url === this.spark.device.url);\n      }\n    },\n    mediaConnection: {\n      deps: [`device`],\n      fn() {\n        return this.device && this.device.mediaConnections[0];\n      }\n    },\n    mediaId: {\n      deps: [`mediaConnection`],\n      fn() {\n        return this.mediaConnection && this.mediaConnection.mediaId;\n      }\n    },\n    remoteAudioMuted: {\n      deps: [`remote`],\n      fn() {\n        return remoteAudioMuted(this.remote);\n      }\n    },\n    remoteVideoMuted: {\n      deps: [`remote`],\n      fn() {\n        return remoteVideoMuted(this.remote);\n      }\n    },\n    direction: {\n      deps: [`locus`],\n      fn() {\n        // This seems brittle, but I can't come up with a better way. The only\n        // way we should have a Call without a locus is if we just initiated a\n        // call but haven't got the response from locus yet.\n        if (!this.locus) {\n          return `out`;\n        }\n        return direction(this.locus);\n      }\n    },\n    from: {\n      deps: [\n        `direction`,\n        `local`,\n        `remote`\n      ],\n      fn() {\n        return this.direction === `out` ? this.local : this.remote;\n      }\n    },\n    to: {\n      deps: [\n        `direction`,\n        `local`,\n        `remote`\n      ],\n      fn() {\n        return this.direction === `in` ? this.local : this.remote;\n      }\n    },\n    local: {\n      deps: [`locus`],\n      fn() {\n        return this.locus && this.locus.self;\n      }\n    },\n    remote: {\n      deps: [`locus`],\n      fn() {\n        return this.locus && remoteParticipant(this.locus);\n      }\n    },\n    /**\n     * <b>initiated</b> - Offer was sent to remote party but they have not yet accepted <br>\n     * <b>ringing</b> - Remote party has acknowledged the call <br>\n     * <b>connected</b> - At least one party is still on the call <br>\n     * <b>disconnected</b> - All parties have dropped <br>\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    status: {\n      deps: [\n        `joinedOnThisDevice`,\n        `local`,\n        `remote`\n      ],\n      fn() {\n        if (this.joinedOnThisDevice && this.remote && participantIsJoined(this.remote)) {\n          return `connected`;\n        }\n\n        if (this.remote && this.local) {\n          if (this.remote.state === `LEFT` || this.local.state === `LEFT`) {\n            return `disconnected`;\n          }\n\n          if (this.remote.state === `DECLINED`) {\n            return `disconnected`;\n          }\n\n          if (this.remote.state === `NOTIFIED`) {\n            return `ringing`;\n          }\n        }\n\n        return `initiated`;\n      }\n    },\n    localAudioDirection: {\n      deps: [`locus`],\n      fn() {\n        return mediaDirectionFromPeerConnection(`audio`, this.pc).toLowerCase();\n      }\n    },\n    localVideoDirection: {\n      deps: [`locus`],\n      fn() {\n        return mediaDirectionFromPeerConnection(`video`, this.pc).toLowerCase();\n      }\n    },\n    remoteAudioDirection: {\n      deps: [`locus`],\n      fn() {\n        // Until Locus fixes the bug that prevents do both renegotiation and\n        // state update, we can't trust the remote direction from the locus\n        return `unknown`;\n      }\n    },\n    remoteVideoDirection: {\n      deps: [`locus`],\n      fn() {\n        // Until Locus fixes the bug that prevents do both renegotiation and\n        // state update, we can't trust the remote direction from the locus\n        return `unknown`;\n      }\n    }\n  },\n\n  /**\n   * Initializer\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // We can't trust the mercury event name, so we need to pipe all locus\n    // events through the same handler.\n    // TODO adjust plugin-mercury to emit events by namespace so we can listen\n    // for incoming locus events in a single handler.\n    eventKeys.forEach((key) => {\n      this.listenTo(this.spark.mercury, `event:${key}`, (event) => this._onLocusEvent(event));\n    });\n\n    this.on(`disconnected`, () => {\n      this.stopListening(this.spark.mercury);\n      this.off();\n      URL.revokeObjectURL(this.localMediaStreamUrl);\n      URL.revokeObjectURL(this.remoteMediaStreamUrl);\n    });\n\n    this.pc = new RTCPeerConnection({iceServers: []});\n    // TODO given all the other chrome/ff discrepancies, make sure this works in\n    // both browsers\n    this.pc.ontrack = (event) => {\n      this.remoteMediaStream = event.streams[0];\n    };\n\n    this.on(`change:remoteMediaStream`, () => {\n      if (this.remoteMediaStreamUrl) {\n        URL.revokeObjectURL(this.remoteMediaStreamUrl);\n      }\n      this.remoteMediaStreamUrl = URL.createObjectURL(this.remoteMediaStream);\n    });\n\n    this.on(`change:remoteMediaStreamUrl`, () => {\n      this.trigger(`remoteMediaStream:change`);\n    });\n\n    this.on(`change:localMediaStreamUrl`, () => {\n      this.trigger(`localMediaStream:change`);\n    });\n\n    this.on(`change:remoteAudioMuted`, () => {\n      this.trigger(`remoteAudioMuted:change`);\n    });\n\n    this.on(`change:remoteVideoMuted`, () => {\n      this.trigger(`remoteVideoMuted:change`);\n    });\n\n    this.on(`change:isActive`, () => {\n      if (!this.isActive) {\n        if (this.joinedOnThisDevice) {\n          this.logger.info(`call: hanging up due to locus going inactive`);\n          this.hangup();\n        }\n      }\n    });\n\n    this.on(`change:activeParticipantsCount`, () => {\n      const previousLocus = this.previousAttributes().locus;\n      // TODO this logic probably goes in state-parsers\n      if (this.joinedOnThisDevice && this.activeParticipantsCount === 1 && previousLocus && activeParticipants(previousLocus).length > 1) {\n        this.logger.info(`call: hanging up due to last participant in call`);\n        this.hangup();\n      }\n    });\n\n    this.on(`change:status`, () => {\n      switch (this.status) {\n      case `ringing`:\n        this.trigger(`ringing`);\n        break;\n      case `connected`:\n        this.trigger(`connected`);\n        break;\n      case `disconnected`:\n        this.trigger(`disconnected`);\n        break;\n      default:\n        // do nothing\n      }\n    });\n  },\n\n  /**\n   * Answers an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a noop\n   * @instance\n   * @memberof Call\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise}\n   */\n  answer(options) {\n    // TODO make this a noop for outbound calls\n    this.logger.info(`call: answering`);\n    // Locus may *think* we're connected if we e.g. reload the page mid-call. If\n    // the user decides to answer the in-progress call that locus thinks they're\n    // a part of, we should immediately emit the connected event.\n    if (this.joinedOnThisDevice) {\n      this.logger.info(`call: already joined on this device`);\n    }\n    return this._join(`join`, this.locus, options)\n      .then(tap(() => this.logger.info(`call: answered`)));\n  },\n\n  /**\n   * Use to acknowledge (without answering) an incoming call. Will cause the\n   * initiator's Call instance to emit the ringing event.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  acknowledge() {\n    this.logger.info(`call: acknowledging`);\n    // TODO call this method automatically unless config says otherwise\n    return this.spark.locus.alert(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.logger.info(`call: acknowledged`)));\n  },\n\n  /**\n   * Used by {@link Phone#dial} to initiate an outbound call\n   * @instance\n   * @memberof Call\n   * @param {[type]} invitee\n   * @param {[type]} options\n   * @private\n   * @returns {[type]}\n   */\n  dial(invitee, options) {\n    this.logger.info(`call: dialing`);\n    this._join(`create`, invitee, options)\n      .then(tap(() => this.logger.info(`call: dialed`)))\n      .catch((reason) => {\n        this.trigger(`error`, reason);\n      });\n\n    return this;\n  },\n\n  /**\n   * Disconnects the active call. Applies to both incoming and outgoing calls.\n   * This method may be invoked in any call state and the SDK should take care\n   * to tear down the call and free up all resources regardless of the state.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  hangup() {\n    // TODO For example, hangup may be invoked immediately after invoking dial()\n    // but before the “locus” has been created. In this case  invoking  hangup()\n    // should short circuit the call setup process and take whatever action is\n    // necessary to ensure all parties are notified that the call is\n    // disconnected.\n    // TODO For incoming calls, invoking hangup should be synonymous with\n    // invoking reject()\n    this.logger.info(`call: hanging up`);\n\n    end(this.pc);\n\n    if (!this.locus) {\n      this.logger.info(`call: no locus, waiting for rest call to complete before hanging up`);\n      return this.when(`change:locus`)\n        .then(() => this.hangup());\n    }\n\n    return this._hangup();\n  },\n\n  /**\n   * Does the internal work necessary to end a call while allowing hangup() to\n   * call itself without getting stuck in promise change because of oneFlight\n   * @private\n   * @returns {Promise}\n   */\n  @oneFlight\n  _hangup() {\n    return this.spark.locus.leave(this.locus)\n      .then((locus) => this._setLocus(locus))\n      // TODO update sending and receving based on the peer connection's streams\n      .then(() => this.set({\n        sendingAudio: false,\n        sendingVideo: false,\n        receivingAudio: false,\n        receivingVideo: false\n      }))\n      .then(tap(() => this.stopListening(this.spark.mercury)))\n      .then(tap(() => this.off()))\n      .then(tap(() => this.logger.info(`call: hung up`)));\n  },\n\n  /**\n   * Alias of {@link Call#reject}\n   * @see {@link Call#reject}\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  decline() {\n    return this.reject();\n  },\n\n  /**\n   * Rejects an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a no-op.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  @oneFlight\n  reject() {\n    // TODO should be a noop for outgoing calls\n    this.logger.info(`call: rejecting`);\n    /* eslint no-invalid-this: [0] */\n    return this.spark.locus.decline(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.stopListening(this.spark.mercury)))\n      .then(tap(() => this.off()))\n      .then(tap(() => this.logger.info(`call: rejected`)));\n  },\n\n  /**\n   * Starts sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingAudio() {\n    return this._changeMedia({sendingAudio: true});\n  },\n\n  /**\n   * Starts sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingVideo() {\n    return this._changeMedia({sendingVideo: true});\n  },\n\n  startReceivingAudio() {\n    return this._changeMedia({receivingAudio: true});\n  },\n\n  startReceivingVideo() {\n    return this._changeMedia({receivingVideo: true});\n  },\n\n  /**\n   * Toggles receiving audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingAudio() {\n    return this.receivingAudio ? this.stopReceivingAudio() : this.startReceivingAudio();\n  },\n\n  /**\n   * Toggles receiving video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingVideo() {\n    return this.receivingVideo ? this.stopReceivingVideo() : this.startReceivingVideo();\n  },\n\n  stopReceivingAudio() {\n    return this._changeMedia({receivingAudio: false});\n  },\n\n  stopReceivingVideo() {\n    return this._changeMedia({receivingVideo: false});\n  },\n\n  /**\n   * Toggles sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingAudio() {\n    return this.sendingAudio ? this.stopSendingAudio() : this.startSendingAudio();\n  },\n\n  /**\n   * Toggles sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingVideo() {\n    return this.sendingVideo ? this.stopSendingVideo() : this.startSendingVideo();\n  },\n\n  /**\n   * Sends feedback about the call to the Cisco Spark cloud\n   * @instance\n   * @memberof Call\n   * @param {Types~Feedback} feedback\n   * @returns {Promise}\n   */\n  sendFeedback(feedback) {\n    return this.spark.metrics.submit(`meetup_call_user_rating`, feedback);\n  },\n\n  /**\n   * Stops sending audio to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingAudio() {\n    return this._changeMedia({sendingAudio: false});\n  },\n\n  /**\n   * Stops sending video to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingVideo() {\n    return this._changeMedia({sendingVideo: false});\n  },\n\n  _changeMedia(constraints) {\n    return new Promise((resolve) => {\n      /* eslint complexity: [0] */\n      if (!this.pc) {\n        resolve();\n        return;\n      }\n\n      constraints = defaults({}, constraints, {\n        sendingVideo: this.sendingVideo,\n        sendingAudio: this.sendingAudio,\n        receivingVideo: this.receivingVideo,\n        receivingAudio: this.receivingAudio\n      });\n\n      constraints = Object.assign({}, constraints, {\n        wasSendingAudio: this.sendingAudio,\n        wasSendingVideo: this.sendingVideo,\n        wasReceivingAudio: this.receivingAudio,\n        wasReceivingVideo: this.receivingVideo\n      });\n\n      this.set(constraints);\n\n      const promises = [];\n      if (constraints.sendingAudio && !constraints.wasSendingAudio) {\n        promises.push(startSendingAudio(this.pc));\n      }\n\n      if (!constraints.sendingAudio && constraints.wasSendingAudio) {\n        promises.push(stopSendingAudio(this.pc));\n      }\n\n      if (constraints.sendingVideo && !constraints.wasSendingVideo) {\n        promises.push(startSendingVideo(this.pc));\n      }\n\n      if (!constraints.sendingVideo && constraints.wasSendingVideo) {\n        promises.push(stopSendingVideo(this.pc));\n      }\n\n      if (constraints.receivingAudio && !constraints.wasReceivingAudio) {\n        promises.push(startReceivingAudio(this.pc));\n      }\n\n      if (!constraints.receivingAudio && constraints.wasReceivingAudio) {\n        promises.push(stopReceivingAudio(this.pc));\n      }\n\n      if (constraints.receivingVideo && !constraints.wasReceivingVideo) {\n        promises.push(startReceivingVideo(this.pc));\n      }\n\n      if (!constraints.receivingVideo && constraints.wasReceivingVideo) {\n        promises.push(stopReceivingVideo(this.pc));\n      }\n\n\n      resolve(Promise.all(promises)\n        .then(() => this._updateMedia())\n        .then(() => this.unset([\n          `wasSendingAudio`,\n          `wasSendingVideo`,\n          `wasReceivingAudio`,\n          `wasReceivingVideo`\n        ])));\n    });\n  },\n\n  _join(locusMethodName, target, options) {\n    options = options || {};\n    options.constraints = defaults(options.constraints, {\n      audio: true,\n      video: true\n    });\n    const recvOnly = !options.constraints.audio && !options.constraints.video;\n    options.offerOptions = defaults(options.offerOptions, {\n      offerToReceiveAudio: recvOnly || options.constraints.audio,\n      offerToReceiveVideo: recvOnly || options.constraints.video\n    });\n\n    let promise;\n    if (!recvOnly) {\n      promise = Promise.resolve(options.localMediaStream || this.spark.phone.createLocalMediaStream(options))\n        .then((localMediaStream) => {\n          this.localMediaStream = localMediaStream;\n          this.localMediaStreamUrl = URL.createObjectURL(localMediaStream);\n          addStream(this.pc, localMediaStream);\n        });\n    }\n\n    return Promise.resolve(promise)\n      .then(() => createOffer(this.pc, options.offerOptions))\n      .then((offer) => this.spark.locus[locusMethodName](target, {\n        localSdp: offer\n      }))\n      .then((locus) => {\n        this._setLocus(locus);\n        const answer = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n        return acceptAnswer(this.pc, answer);\n      })\n      .then(() => {\n        this.set({\n          sendingAudio: options.constraints.audio,\n          sendingVideo: options.constraints.video,\n          receivingAudio: options.offerOptions.offerToReceiveAudio,\n          receivingVideo: options.offerOptions.offerToReceiveVideo\n        });\n      });\n  },\n\n  _onLocusEvent(event) {\n    if (this.locus && event.data.locus.url === this.locus.url) {\n      this.logger.info(`locus event: ${event.data.eventType}`);\n      this._setLocus(event.data.locus);\n    }\n  },\n\n  _setLocus(incoming) {\n    const current = this.locus;\n    if (!current) {\n      this.locus = incoming;\n      return Promise.resolve();\n    }\n    const action = this.spark.locus.compare(current, incoming);\n\n    switch (action) {\n    case USE_INCOMING:\n      this.locus = incoming;\n      break;\n    case FETCH:\n      return this.spark.locus.get(current)\n         .then((locus) => this._setLocus(locus));\n    default:\n      // do nothing\n    }\n\n    return Promise.resolve();\n  },\n\n  @oneFlight\n  _updateMedia() {\n    /* eslint max-nested-callbacks: [0] */\n    return new Promise((resolve) => {\n      process.nextTick(() => {\n        resolve(createOffer(this.pc, {\n          offerToReceiveAudio: this.receivingAudio,\n          offerToReceiveVideo: this.receivingVideo\n        })\n          .then((offer) => this.spark.locus.updateMedia(this.locus, {\n            localSdp: offer,\n            mediaId: this.mediaId,\n            audioMuted: !this.sendingAudio,\n            videoMuted: !this.sendingVideo\n          }))\n          .then((locus) => {\n            this._setLocus(locus);\n            const sdp = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n            return acceptAnswer(this.pc, sdp);\n          }));\n      });\n    });\n  }\n});\n\nCall.make = function make(attrs, options) {\n  return new Call(attrs, options);\n};\n\nexport default Call;\n"]}