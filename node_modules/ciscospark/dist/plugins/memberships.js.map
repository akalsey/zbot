{"version":3,"sources":["../../src/plugins/memberships.js"],"names":["Memberships","extend","create","membership","request","method","uri","config","hydraServiceUrl","body","then","res","get","id","items","list","options","qs","spark","remove","statusCode","undefined","update"],"mappings":";;;;;;AAMA;;AAEA;;;;;;;;;;;AAWA;;;;AAIA,IAAMA,cAAc,uBAAYC,MAAZ,CAAmB;AACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAC,QA/BqC,kBA+B9BC,UA/B8B,EA+BlB;AACjB,WAAO,KAAKC,OAAL,CAAa;AAClBC,oBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,iBAFkB;AAGlBC,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD,GAtCoC;;;AAwCrC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAG,KAnEqC,eAmEjCT,UAnEiC,EAmErB;AACd,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,qBAAmDK;AADjC,KAAb,EAGJH,IAHI,CAGC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASK,KAAT,IAAkBH,IAAIF,IAA/B;AAAA,KAHD,CAAP;AAID,GAzEoC;;;AA2ErC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCAM,MAhHqC,gBAgHhCC,OAhHgC,EAgHvB;AAAA;;AACZ,WAAO,KAAKZ,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,iBADkB;AAElBS,UAAID;AAFc,KAAb,EAIJN,IAJI,CAIC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKO,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAtHoC;;;AAwHrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAC,QA5JqC,kBA4J9BhB,UA5J8B,EA4JlB;AACjB,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBC,sBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,qBAAmDK;AAFjC,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIS,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOV,IAAIF,IAAX;AACD,KAXI,CAAP;AAYD,GA3KoC;;;AA6KrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAa,QA5MqC,kBA4M9BnB,UA5M8B,EA4MlB;AACjB,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBC,mBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,qBAAmDK,EAFjC;AAGlBJ,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD;AApNoC,CAAnB,CAApB,C,CAvBA;;;;;;kBA8OeT,W","file":"memberships.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Membership\n * @property {uuid} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {uuid} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator.\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor.\n * @property {isoDate} created - The date and time that this membership was created.\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst Memberships = SparkPlugin.extend({\n  /**\n   * Adds a person to a room. The person can be added by ID (personId) or by\n   * Email Address (personEmail). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {Types~Membership} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/memberships`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * var ciscospark = require('../..');\n   * var membership;\n   * ciscospark.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<Types~Membership>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room;\n   * ciscospark.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i++) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/memberships`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var ciscospark = require('../..');\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return ciscospark.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * var ciscospark = require('../..');\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return ciscospark.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Memberships;\n"]}