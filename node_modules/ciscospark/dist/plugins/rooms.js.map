{"version":3,"sources":["../../src/plugins/rooms.js"],"names":["Rooms","extend","create","room","request","method","uri","config","hydraServiceUrl","body","then","res","get","options","id","qs","items","list","spark","remove","statusCode","undefined","update"],"mappings":";;;;;;AAAA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;AAQA,IAAMA,QAAQ,uBAAYC,MAAZ,CAAmB;AAC/B;;;;;;;;;;;;;;;;;;;;;;AAsBAC,QAvB+B,kBAuBxBC,IAvBwB,EAuBlB;AACX,WAAO,KAAKC,OAAL,CAAa;AAClBC,oBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,WAFkB;AAGlBC,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD,GA9B8B;;;AAgC/B;;;;;;;;;;;;;;;;;;;;;;AAsBAG,KAtD+B,eAsD3BT,IAtD2B,EAsDrBU,OAtDqB,EAsDZ;AACjB,QAAMC,KAAKX,KAAKW,EAAL,IAAWX,IAAtB;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,eAA6CM,EAD3B;AAElBC,UAAIF;AAFc,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASO,KAAT,IAAkBL,IAAIF,IAA/B;AAAA,KAJD,CAAP;AAKD,GA9D8B;;;AAgE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAQ,MAjG+B,gBAiG1BJ,OAjG0B,EAiGjB;AAAA;;AACZ,WAAO,KAAKT,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,YADkB;AAElBO,UAAIF;AAFc,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKO,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAvG8B;;;AAyG/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAC,QArI+B,kBAqIxBhB,IArIwB,EAqIlB;AACX,QAAMW,KAAKX,KAAKW,EAAL,IAAWX,IAAtB;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBC,sBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,eAA6CM;AAF3B,KAAb,EAIJJ,IAJI,CAIC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIS,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOV,IAAIF,IAAX;AACD,KAXI,CAAP;AAYD,GAnJ8B;;;AAqJ/B;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAa,QA9K+B,kBA8KxBnB,IA9KwB,EA8KlB;AACX,QAAMW,KAAKX,KAAKW,EAAhB;AACA,WAAO,KAAKV,OAAL,CAAa;AAClBC,mBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,eAA6CM,EAF3B;AAGlBL,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD;AAtL8B,CAAnB,CAAd;;kBAyLeT,K","file":"rooms.js","sourcesContent":["import {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Room\n * @property {string} id - (server generated) Unique identifier for the room\n * @property {string} title - The display name for the room. All room members\n * will see the title so make it something good\n * @property {isoDate} created - (server generated) The date and time that the\n * room was created\n * @property {string} teamId - (optional): The id of the team to which the room\n * belongs\n */\n\n/**\n * Rooms are virtual meeting places for getting stuff done. This resource\n * represents the room itself. Check out the Memberships API to learn how to add\n * and remove people from rooms and the Messages API for posting and managing\n * content.\n * @class\n * @extends SparkPlugin\n */\nconst Rooms = SparkPlugin.extend({\n  /**\n   * Creates a new room. The authenticated user is automatically added as a\n   * member of the room. See the @{link Memberships} to learn how to add more\n   * people to the room.\n   * {@link Membership}\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room} room\n   * @returns {Promise<Types~Room>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Create Room Example'})\n   *   .then(function(room) {\n   *     var assert = require('assert')\n   *     assert(typeof room.created === 'string');\n   *     assert(typeof room.id === 'string');\n   *     assert(room.title === 'Create Room Example');\n   *     console.log(room.title);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(room) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/rooms`,\n      body: room\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room|string} room\n   * @param {Object} options\n   * @returns {Promise<Types~Room>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room;\n   * ciscospark.rooms.create({title: 'Get Room Example'})\n   *   .then(function(r) {\n   *     room = r\n   *     return ciscospark.rooms.get(room.id)\n   *   })\n   *   .then(function(r) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(r, room);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(room, options) {\n    const id = room.id || room;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of rooms. In most cases the results will only contain rooms\n   * that the authentiated user is a member of.\n   * @instance\n   * @memberof Rooms\n   * @param {Object} options\n   * @param {Object} options.max Limit the maximum number of rooms in the\n   * response.\n   * @returns {Promise<Page<Types~Room>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var createdRooms;\n   * Promise.all([\n   *   ciscospark.rooms.create({title: 'List Rooms Example 1'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 2'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return ciscospark.rooms.list({max: 3})\n   *       .then(function(rooms) {\n   *         var assert = require('assert');\n   *         assert(rooms.length === 3);\n   *         for (var i = 0; i < rooms.items.length; i++) {\n   *           assert(createdRooms.filter(function(room) {\n   *             return room.id === rooms.items[i].id;\n   *           }).length === 1);\n   *         }\n   *         return 'success';\n   *       });\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/rooms/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room|string} room\n   * @returns {Promise}\n   * @example\n   * var ciscospark = require('../..');\n   * var room;\n   * ciscospark.rooms.create({title: 'Remove Room Example'})\n   *  .then(function(r) {\n   *    room = r;\n   *    return ciscospark.rooms.remove(room.id);\n   *  })\n   *  .then(function() {\n   *    return ciscospark.rooms.get(room.id);\n   *  })\n   *  .then(function() {\n   *    var assert = require('assert');\n   *    assert(false, 'the previous get should have failed');\n   *  })\n   *  .catch(function(reason) {\n   *    var assert = require('assert');\n   *    assert.equal(reason.statusCode, 404);\n   *    return 'success'\n   *  });\n   *  // => success\n   */\n  remove(room) {\n    const id = room.id || room;\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single room's properties.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room} room\n   * @returns {Promise<Types~Room>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room;\n   * ciscospark.rooms.create({title: 'Update Room Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     room.title = 'Update Room Example (Updated Title)';\n   *     return ciscospark.rooms.update(room);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.rooms.get(room.id);\n   *   })\n   *   .then(function(room) {\n   *    var assert = require('assert');\n   *     assert.equal(room.title, 'Update Room Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(room) {\n    const id = room.id;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`,\n      body: room\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Rooms;\n"]}