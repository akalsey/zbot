{"version":3,"sources":["../../src/plugins/messages.js"],"names":["Messages","extend","create","message","key","file","logger","warn","files","reduce","type","options","method","uri","config","hydraServiceUrl","request","then","res","body","get","id","items","list","qs","spark","remove","statusCode","undefined"],"mappings":";;;;;;;;;;;;;;;;;;AAMA;;;;AAGA;;;;;;;;;;;AAWA;;;;;;;;AAQA,IAAMA,WAAW,uBAAYC,MAAZ,CAAmB;AAClC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAC,QA3BkC,kBA2B3BC,OA3B2B,EA2BlB;AACd,QAAIC,YAAJ;AACA,QAAID,QAAQE,IAAZ,EAAkB;AAChB,WAAKC,MAAL,CAAYC,IAAZ;AACAJ,cAAQK,KAAR,GAAgB,CAACL,QAAQE,IAAT,CAAhB;AACA,oCAAuBF,OAAvB;AACD;;AAED,QAAI,uBAAQA,QAAQK,KAAhB,KAA0BL,QAAQK,KAAR,CAAcC,MAAd,CAAqB,UAACC,IAAD,EAAOL,IAAP;AAAA,aAAgBK,QAAQ,OAAOL,IAAP,aAAxB;AAAA,KAArB,EAAuE,KAAvE,CAA9B,EAA6G;AAC3GD;AACD;;AAED,QAAMO;AACJC,oBADI;AAEJC,WAAQ,KAAKC,MAAL,CAAYC,eAApB;AAFI,OAGHX,GAHG,EAGGD,OAHH,CAAN;;AAMA,WAAO,KAAKa,OAAL,CAAaL,OAAb,EACJM,IADI,CACC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAb;AAAA,KADD,CAAP;AAED,GA/CiC;;;AAiDlC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAC,KA5EkC,eA4E9BjB,OA5E8B,EA4ErB;AACX,QAAMkB,KAAKlB,QAAQkB,EAAR,IAAclB,OAAzB;;AAEA,WAAO,KAAKa,OAAL,CAAa;AAClBH,WAAQ,KAAKC,MAAL,CAAYC,eAApB,kBAAgDM;AAD9B,KAAb,EAGJJ,IAHI,CAGC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,CAASG,KAAT,IAAkBJ,IAAIC,IAA/B;AAAA,KAHD,CAAP;AAID,GAnFiC;;;AAqFlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCAI,MA7HkC,gBA6H7BZ,OA7H6B,EA6HpB;AAAA;;AACZ,WAAO,KAAKK,OAAL,CAAa;AAClBH,WAAQ,KAAKC,MAAL,CAAYC,eAApB,cADkB;AAElBS,UAAIb;AAFc,KAAb,EAIJM,IAJI,CAIC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKO,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAnIiC;;;AAqIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCAC,QA9KkC,kBA8K3BvB,OA9K2B,EA8KlB;AACd,QAAMkB,KAAKlB,QAAQkB,EAAR,IAAclB,OAAzB;;AAEA,WAAO,KAAKa,OAAL,CAAa;AAClBJ,sBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,kBAAgDM;AAF9B,KAAb,EAIJJ,IAJI,CAIC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIS,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOV,IAAIC,IAAX;AACD,KAXI,CAAP;AAYD;AA7LiC,CAAnB,CAAjB,C,CA5BA;;;;;;kBA4NenB,Q","file":"messages.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\nimport {isArray} from 'lodash';\n\n/**\n * @typedef {Object} Types~Message\n * @property {uuid} id - (server generated) Unique identifier for the message\n * @property {uuid} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The message posted to the room in plain text\n * @property {isoDate} created - (server generated)The source URLs for the\n * message attachment. See the {@link Content & Attachments{ Guide for a list of\n * supported media types.\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link Message Attachments Guide} for a list of supported media types.\n * @class\n * @extends SparkPlugin\n */\nconst Messages = SparkPlugin.extend({\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Message} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = `body`;\n    if (message.file) {\n      this.logger.warn(`Supplying a single \\`file\\` property is deprecated; please supply a \\`files\\` array`);\n      message.files = [message.file];\n      Reflect.deleteProperty(message, `file`);\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== `string`, false)) {\n      key = `formData`;\n    }\n\n    const options = {\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Room|string} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * var ciscospark = require('../..');\n   * var message;\n   * ciscospark.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return ciscospark.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<Types~Message>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var message1, message2, room;\n   * ciscospark.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Message|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var ciscospark = require('../..');\n   * var message1, room;\n   * ciscospark.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}