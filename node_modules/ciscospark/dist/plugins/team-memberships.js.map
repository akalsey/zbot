{"version":3,"sources":["../../src/plugins/team-memberships.js"],"names":["TeamMemberships","extend","create","membership","request","method","uri","config","hydraServiceUrl","body","then","res","get","id","items","list","options","qs","spark","remove","statusCode","undefined","update"],"mappings":";;;;;;AAMA;;AAEA;;;;;;;;;AASA;;;;;;;;;;;AAWA,IAAMA,kBAAkB,uBAAYC,MAAZ,CAAmB;AACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAC,QA7ByC,kBA6BlCC,UA7BkC,EA6BtB;AACjB,WAAO,KAAKC,OAAL,CAAa;AAClBC,oBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,sBAFkB;AAGlBC,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD,GApCwC;;;AAsCzC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAG,KAjEyC,eAiErCT,UAjEqC,EAiEzB;AACd,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,0BAAwDK;AADtC,KAAb,EAGJH,IAHI,CAGC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASK,KAAT,IAAkBH,IAAIF,IAA/B;AAAA,KAHD,CAAP;AAID,GAvEwC;;;AAyEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAM,MAzGyC,gBAyGpCC,OAzGoC,EAyG3B;AAAA;;AACZ,WAAO,KAAKZ,OAAL,CAAa;AAClBE,WAAQ,KAAKC,MAAL,CAAYC,eAApB,sBADkB;AAElBS,UAAID;AAFc,KAAb,EAIJN,IAJI,CAIC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKO,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GA/GwC;;;AAiHzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAC,QArJyC,kBAqJlChB,UArJkC,EAqJtB;AACjB,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBC,sBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,0BAAwDK;AAFtC,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIS,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOV,IAAIF,IAAX;AACD,KAXI,CAAP;AAYD,GApKwC;;;AAsKzC;;;;;;;AAOAa,QA7KyC,kBA6KlCnB,UA7KkC,EA6KtB;AACjB,QAAMU,KAAKV,WAAWU,EAAX,IAAiBV,UAA5B;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBC,mBADkB;AAElBC,WAAQ,KAAKC,MAAL,CAAYC,eAApB,0BAAwDK,EAFtC;AAGlBJ,YAAMN;AAHY,KAAb,EAKJO,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KALD,CAAP;AAMD;AArLwC,CAAnB,CAAxB,C,CA5BA;;;;;;kBAoNeT,e","file":"team-memberships.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~TeamMembership\n * @property {string} id - (server generated) The team ID\n * @property {string} personId - The person ID\n * @property {string} personEmail - The email address of the person\n * @property {boolean} isModerator - Set to `true` to make the person a team\n * moderator\n */\n\n/**\n * Team Memberships represent a person's relationship to a team. Use this API to\n * list members of any team that you're in or create memberships to invite\n * someone to a team. Team memberships can also be updated to make someome a\n * moderator or deleted to remove them from the team.\n *\n * Just like in the Spark app, you must be a member of the team in order to list\n * its memberships or invite people.\n * @class\n * @extends SparkPlugin\n */\nconst TeamMemberships = SparkPlugin.extend({\n  /**\n   * Add someone to a team by Person ID or email address; optionally making them\n   * a moderator.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Types~TeamMembership} membership\n   * @returns {Promise<Types~TeamMembership>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.teams.create({name: 'Create Team Membership Example'})\n   *   .then(function(team) {\n   *     return ciscospark.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.teamId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Get details for a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Types~TeamMembership|string} membership\n   * @returns {Promise<Types~TeamMembership>}\n   * @example\n   * var ciscospark = require('../..');\n   * var membership;\n   * ciscospark.teams.create({name: 'Get Team Memberships Example'})\n   *   .then(function(team) {\n   *     return ciscospark.teamMemberships.create({\n   *       personEmail: 'alice@example.com',\n   *       teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.teamMemberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all team memberships. By default, lists memberships for teams to\n   * which the authenticated user belongs.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Object} options\n   * @param {string} options.max\n   * @returns {[type]}\n   * @example\n   * var ciscospark = require('../..');\n   * var team;\n   * ciscospark.teams.create({name: 'List Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return ciscospark.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     for (var i = 0; i < teamMemberships.length; i++) {\n   *       assert.equal(teamMemberships.items[i].teamId, team.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/team/memberships`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Types~TeamMembership|string} membership\n   * @returns {Promise}\n   * @example\n   * var ciscospark = require('../..');\n   * var membership, team;\n   * ciscospark.teams.create({name: 'Remove Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return ciscospark.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     return ciscospark.teamMemberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Updates properties for a membership.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Types~TeamMembership} membership\n   * @returns {Promise<Types~TeamMembership>}\n   */\n  update(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default TeamMemberships;\n"]}