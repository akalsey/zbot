{"version":3,"sources":["../src/ciscospark.js"],"names":["interceptors","device","create","ciscospark","credentials","authorization","access_token","process","env","CISCOSPARK_ACCESS_TOKEN","refresh_token","CISCOSPARK_REFRESH_TOKEN","config","init","attrs","forEach","key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AACA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AAvBA;;;;;;AAMA;;AAkBA,IAAMA,eAAe,EAArB;AACA,IAAI,CAAC,oBAASC,MAAd,EAAsB;AACpBD,oCAAkC,eAAgBE,MAAlD;AACD;;AAED,qEAA2C;AACzCF;AADyC,CAA3C;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AAQA,IAAMG,aAAa,wBAAe;AAChCC,eAAa;AACXC,mBAAe;AACbC,oBAAcC,QAAQC,GAAR,CAAYC,uBADb;AAEbC,qBAAeH,QAAQC,GAAR,CAAYG;AAFd;AADJ,GADmB;AAOhCC;AAPgC,CAAf,CAAnB;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAT,WAAWU,IAAX,GAAkB,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACrC,MAAI,mBAAIA,KAAJ,iCAA0C,+CAA9C,EAAgF;AAC9EA,UAAMV,WAAN,CAAkBC,aAAlB,GAAkC,EAAlC;AACA,kIAQEU,OARF,CAQU,UAACC,GAAD,EAAS;AACjB,yBAAIF,KAAJ,iCAAwCE,GAAxC,EAA+C,mBAAIF,KAAJ,mBAA0BE,GAA1B,CAA/C;AACA,oCAAuBF,MAAMV,WAA7B,EAA0CY,GAA1C;AACD,KAXD;AAYD;;AAEDF,QAAMF,MAAN,GAAe,wBAASE,MAAMF,MAAf,mBAAf;;AAEA,SAAO,wBAAeE,KAAf,CAAP;AACD,CApBD;;kBAsBeX,U","file":"ciscospark.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint camelcase: [0] */\n\nimport '@ciscospark/plugin-phone';\nimport '@ciscospark/plugin-logger';\n\nimport {defaults, get, has, set} from 'lodash';\nimport CiscoSpark, {children, registerPlugin} from '@ciscospark/spark-core';\nimport AuthInterceptor from './interceptors/auth';\nimport Memberships from './plugins/memberships';\nimport Messages from './plugins/messages';\nimport People from './plugins/people';\nimport Rooms from './plugins/rooms';\nimport Teams from './plugins/teams';\nimport TeamMemberships from './plugins/team-memberships';\nimport Webhooks from './plugins/webhooks';\nimport config from './config';\n\n// This shouldn't be necessary once the plugins are moved to their own packages\nconst interceptors = {};\nif (!children.device) {\n  interceptors[`AuthInterceptor`] = AuthInterceptor.create;\n}\n\nregisterPlugin(`memberships`, Memberships, {\n  interceptors\n});\nregisterPlugin(`messages`, Messages);\nregisterPlugin(`people`, People);\nregisterPlugin(`rooms`, Rooms);\nregisterPlugin(`teams`, Teams);\nregisterPlugin(`teamMemberships`, TeamMemberships);\nregisterPlugin(`webhooks`, Webhooks);\n\n// documentation.js puts hashes in relative urls, so need to specify full urls\n// here\n/**\n * See {@link https://ciscospark.github.io/spark-js-sdk/example/browsers|Browser Guide} and\n * {@link https://ciscospark.github.io/spark-js-sdk/example/servers|Server Guide}\n * @see {@link /example/browsers|Browser Guide}\n * @see {@link /example/servers|Server Guide}\n * @class CiscoSpark\n * @extends SparkCore\n */\nconst ciscospark = new CiscoSpark({\n  credentials: {\n    authorization: {\n      access_token: process.env.CISCOSPARK_ACCESS_TOKEN,\n      refresh_token: process.env.CISCOSPARK_REFRESH_TOKEN\n    }\n  },\n  config\n});\n\n/**\n * Create a new ciscospark instance.\n *\n * Note: ciscospark.init() really only applies to node apps at this time. In web\n * browsers, you'll want to stick with manipulating the ciscospark instance you\n * get from `require('ciscospark')`.\n *\n * In addition to creating spark instances when you need more than one at a time\n * (for example, on an Express route handler), you can use `ciscospark.init()`\n * to create instances with an alternate config object. You'll typically do this\n * when you want to provide an alternate storage backend:\n * ```javascript\n * const spark = ciscospark.init({\n *   config: {\n *     storage: {\n *       boundedAdapter: youCustomAdapter\n *     }\n *   }\n * })\n * ```\n * Previous versions of the sdk suggested you should pass credentials here.\n * While that still possible, we no longer document it because you should rely\n * on the storage layer instead.\n * @param {Object} attrs\n * @param {Object} attrs.config (optional)\n * @memberof CiscoSpark\n * @returns {CiscoSpark}\n */\nciscospark.init = function init(attrs) {\n  if (has(attrs, `credentials.access_token`) || has(`credentials.refresh_token`)) {\n    attrs.credentials.authorization = {};\n    [\n      `access_token`,\n      `token_type`,\n      `expires`,\n      `expires_in`,\n      `refresh_token`,\n      `refresh_token_expires`,\n      `refresh_token_expires_in`\n    ].forEach((key) => {\n      set(attrs, `credentials.authorization.${key}`, get(attrs, `credentials.${key}`));\n      Reflect.deleteProperty(attrs.credentials, key);\n    });\n  }\n\n  attrs.config = defaults(attrs.config, config);\n\n  return new CiscoSpark(attrs);\n};\n\nexport default ciscospark;\n"]}