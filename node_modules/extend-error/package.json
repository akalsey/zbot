{
  "_args": [
    [
      {
        "raw": "extend-error@git://github.com/ianwremmel/extend-error.git",
        "scope": null,
        "escapedName": "extend-error",
        "name": "extend-error",
        "rawSpec": "git://github.com/ianwremmel/extend-error.git",
        "spec": "git://github.com/ianwremmel/extend-error.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ianwremmel/extend-error.git",
          "sshUrl": "git+ssh://git@github.com/ianwremmel/extend-error.git",
          "httpsUrl": "git+https://github.com/ianwremmel/extend-error.git",
          "gitUrl": "git://github.com/ianwremmel/extend-error.git",
          "shortcut": "github:ianwremmel/extend-error",
          "directUrl": "https://raw.githubusercontent.com/ianwremmel/extend-error/master/package.json"
        }
      },
      "/Users/akalsey/Documents/projects/zmachine-tropo/node_modules/@ciscospark/http-core"
    ]
  ],
  "_from": "git://github.com/ianwremmel/extend-error.git",
  "_id": "extend-error@0.0.2",
  "_inCache": true,
  "_location": "/extend-error",
  "_phantomChildren": {},
  "_requested": {
    "raw": "extend-error@git://github.com/ianwremmel/extend-error.git",
    "scope": null,
    "escapedName": "extend-error",
    "name": "extend-error",
    "rawSpec": "git://github.com/ianwremmel/extend-error.git",
    "spec": "git://github.com/ianwremmel/extend-error.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ianwremmel/extend-error.git",
      "sshUrl": "git+ssh://git@github.com/ianwremmel/extend-error.git",
      "httpsUrl": "git+https://github.com/ianwremmel/extend-error.git",
      "gitUrl": "git://github.com/ianwremmel/extend-error.git",
      "shortcut": "github:ianwremmel/extend-error",
      "directUrl": "https://raw.githubusercontent.com/ianwremmel/extend-error/master/package.json"
    }
  },
  "_requiredBy": [
    "/@ciscospark/http-core",
    "/@ciscospark/plugin-mercury",
    "/@ciscospark/spark-core"
  ],
  "_resolved": "git://github.com/ianwremmel/extend-error.git#d9626f4005cd3b94d3df3d24cd1b59fd6df09ddd",
  "_shasum": "c0120fad796c4fc0568a206e26f4e3d05cee15cc",
  "_shrinkwrap": null,
  "_spec": "extend-error@git://github.com/ianwremmel/extend-error.git",
  "_where": "/Users/akalsey/Documents/projects/zmachine-tropo/node_modules/@ciscospark/http-core",
  "author": {
    "name": "Jayy Vis",
    "email": "jayyvis@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jayyvis/extend-error/issues"
  },
  "contributors": [
    {
      "name": "Ian W. Remmel",
      "email": "design@ianwremmel.com"
    }
  ],
  "dependencies": {
    "lodash.clonedeep": "~3.0.0",
    "lodash.forown": "~3.0.1",
    "lodash.identity": "~3.0.0"
  },
  "description": "Easily define custom error types in Node.js",
  "devDependencies": {
    "karma": "~0.12.31",
    "karma-browserify": "~4.1.2",
    "karma-chrome-launcher": "~0.1.8",
    "karma-cli": "0.0.4",
    "karma-firefox-launcher": "~0.1.4",
    "karma-mocha": "~0.1.10",
    "karma-mocha-reporter": "~1.0.2",
    "karma-sauce-launcher": "~0.2.10",
    "mocha": "*"
  },
  "gitHead": "d9626f4005cd3b94d3df3d24cd1b59fd6df09ddd",
  "homepage": "https://github.com/jayyvis/extend-error#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "extend-error",
  "optionalDependencies": {},
  "readme": "# extend-error\n[![Build Status](https://travis-ci.org/ianwremmel/extend-error.svg)](https://travis-ci.org/ianwremmel/extend-error) [![Dependencies](https://david-dm.org/ianwremmel/extend-error.svg)](https://david-dm.org/ianwremmel/extend-error)\n[![Browser Status](https://drone.io/github.com/ianwremmel/extend-error/status.png)](https://drone.io/github.com/ianwremmel/extend-error/latest)\n\nEver tried to create custom error types in Node.js and wished it should be this simple?\n\n```\nvar MyError = Error.extend('MyError');\n```\n\n```\nthrow MyError('wow')\n```\n\n### installation\n\n```\nnpm install extend-error\n```\n\nand in your app.js, just ```require('extend-error').polyfill()```. It will provide you an extend() method for the Error type.\n\n### syntax\n- extend() takes two arguments : subTypeName & errorCode [optional]\n- it returns the newly created error type\n\n#### polyfilling\n\nAll of the examples here assume you ran `polyfill()`. If you're not comfortable with modifying native objects, you can use `extendError()` directly.\n\n```\nvar extendError = require('extend-error');\nvar ClientError = extendError('ClientError', 400);\nvar HttpNotFound = extendError(ClientError, HttpNotFound, 404);\n```\n\n### more examples for a web app\n\n```\nvar AppError = Error.extend('AppError', 500);\nvar ClientError = Error.extend('ClientError', 400);\n```\n\nextend ClientError further for specific http types\n\n```\nvar HttpNotFound = ClientError.extend('HttpNotFoundError', 404);\nvar HttpUnauthorized = ClientError.extend('HttpUnauthorized', 401);\n```\n\n### throwing errors\n\n```\nthrow new AppError('unable to connect db due to error: ' + err);\n\nthrow new ClientError({'message':'required field missing', field: 'email'})\n\nthrow new HttpNotFound('no post found with id: ' + id);\n\nthrow new HttpNotFound({'message': 'no such post', 'id': id});\n```\n\n### don't worry when you forget 'new'\n\n```\nthrow ClientError('bad request');\n```\n\n### instanceof\n\nthrow an error in controller\n\n```\nvar err = HttpNotFound('user profile not found');\n\nthrow err;\n(or)\ncallback(err)\n```\n\nhandle it easily in global error handler (in case of express.js error middleware)\n\n```\nif (err instanceof ClientError) {\n\t//send out the actual message\n\tres.send(err.code, err.message);\n} else {\n\t//send out a generic message\n\tres.send(500, 'oops! something went wrong');\n\tlog.error(err);\n}\n\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jayyvis/extend-error.git"
  },
  "scripts": {
    "test": "mocha --ui bdd",
    "test-browser": "karma start karma-ci.conf.js"
  },
  "version": "0.0.2"
}
